# Z88DK C Code Generation Guidelines for ZX Spectrum 48K

## CRITICAL INSTRUCTIONS
- Output ONLY the raw C source code. No introductory text, no explanations, no markdown fences (```), just the code itself.
- Ensure the code is complete, directly compilable with 'zcc +zx', and functional on a ZX Spectrum 48K.
- Adhere strictly to Z88DK's C dialect and library functions suitable for the Spectrum.

## General Style and Best Practices
- Use `uint8_t` and `uint16_t` for integer types (from `<stdint.h>` which is implicitly included).
- Avoid floating-point math; use fixed-point if necessary.
- Minimize stack usage, especially in interrupt routines. Declare large buffers/arrays globally or statically.
- Use Z88DK constants for hardware access (e.g., `INK_BLACK`, `PAPER_WHITE`).
- Prefer simple loops (`for(volatile uint16_t i=0; i<DELAY; ++i);`) for short delays instead of complex timer functions.
- Comment your code clearly, especially complex logic or hardware interactions.
- Always include `<spectrum.h>` for platform-specific functions and types.
- Do NOT include `<stdio.h>` unless absolutely necessary for formatted output (rare on Spectrum).

## Hardware Interaction
- Video Memory (Pixels): Starts at 0x4000. Screen layout is non-linear.
- Video Memory (Attributes): Starts at 0x5800 (1 byte per 8x8 cell: INK + PAPER + BRIGHT + FLASH).
- Keyboard: Use `in_key_pressed(SCANCODE)` for specific keys or `in_inkey()` for ASCII character input. Implement debouncing if needed.
- Beeper Sound: Use port 254, bit 4. Precise timing is needed for frequencies. Use `zx_beep()` for simple sounds.
- Border Color: Use `zx_border(color)`. Useful for visual debugging.

## Common Pitfalls & Warnings
- Contended Memory: Accessing ULA memory (0x4000-0x7FFF) is slower when the ULA is drawing the screen. Be mindful in performance-critical loops.
- Stack Overflow: Ensure the stack (typically grows down from top of RAM) doesn't collide with your code or data.
- Infinite Loops: Ensure `while(1)` loops have exit conditions or handle interrupts/input correctly.
- ROM Calls: Avoid calling ROM routines directly unless you know what you are doing; prefer Z88DK library functions.

## Optimization Tips
- Use bit shifts (`<<`, `>>`) instead of multiplication/division by powers of 2.
- Use bitwise operations (`&`, `|`, `^`) for masking and flags.
- Precalculate values whenever possible.
- Optimize critical loops (e.g., drawing routines) - unrolling might help sometimes.

## Example API Usage Snippet (Plotting a Pixel)
```c
#include <spectrum.h>
#include <stdint.h>

void plot_pixel(uint8_t x, uint8_t y) {
  // Simple plot ignoring attributes
  *zx_pxy2saddr(x, y) |= zx_px2bitmask(x);
}
```

Remember: Focus on generating functional, readable, and reasonably efficient C code specifically for the ZX Spectrum using Z88DK.