#!/bin/bash

# Colors and styling
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'
BOLD='\033[1m'

# Check and activate virtual environment
VENV_PATH=".venv"
if [ ! -d "$VENV_PATH" ]; then
    echo -e "${RED}❌ Virtual environment not found!${NC}"
    echo "Please run install_arch.sh first"
    exit 1
fi

# Activate virtual environment
source "$VENV_PATH/bin/activate" || {
    echo -e "${RED}❌ Failed to activate virtual environment!${NC}"
    exit 1
}

# Simple progress bar function
progress_bar() {
    local progress=$1
    local total=30
    local filled=$(($progress * total / 100))
    local empty=$((total - filled))
    
    printf "\r["
    printf "%${filled}s" | tr ' ' '█'
    printf "%${empty}s" | tr ' ' '.'
    printf "] %d%%" $progress
}

# Error handling
handle_error() {
    echo -e "\n${RED}❌ Error: $1${NC}"
    if [ -f "/tmp/build_error" ]; then
        echo -e "\n${RED}Error details:${NC}"
        cat /tmp/build_error
    fi
    exit 1
}

# Parse arguments
LAUNCH_EMULATOR=1
GENERATOR_MODE=1
EMULATOR="zesarux"  # Por defecto usamos ZEsarUX

while [[ $# -gt 0 ]]; do
    case $1 in
        --no-emulator)
            LAUNCH_EMULATOR=0
            shift
            ;;
        --source=*)
            source_file="${1#*=}"
            GENERATOR_MODE=0
            shift
            ;;
        --emulator=*)
            EMULATOR="${1#*=}"
            if [[ "$EMULATOR" != "zesarux" && "$EMULATOR" != "fuse" ]]; then
                handle_error "Invalid emulator. Use 'zesarux' or 'fuse'"
            fi
            shift
            ;;
        *)
            echo "Unknown parameter: $1"
            exit 1
            ;;
    esac
done

echo -e "${BLUE}${BOLD}🔧 ZX Spectrum Program Builder${NC}\n"

# Handle source code
if [ $GENERATOR_MODE -eq 1 ]; then
    # Run Python generator if no source specified
    echo -e "${BLUE}Executing AI code generator...${NC}"
    python llm_z80.py || handle_error "Python generator failed"
    echo -e "\n"

    # Find the most recent .c file (generated by Python)
    latest_dir=$(ls -td local/*/ | head -1)
    if [ -z "$latest_dir" ]; then
        handle_error "No source code generated. Generator failed."
    fi

    source_file="${latest_dir}/main.c"
    build_dir="${latest_dir}/build"
else
    # Use provided source file
    if [ ! -f "$source_file" ]; then
        handle_error "Source file not found: ${source_file}"
    fi
    build_dir="build/$(basename $(dirname $source_file))/$(basename $source_file .c)"
fi

# Create output directory
mkdir -p "${build_dir}"

# Compilation steps with progress
echo -e "${BLUE}Compiling C to Z80 assembly...${NC}"
echo -e "${BLUE}Using source: ${source_file}${NC}"

# Get Z88DK root path and set environment variables
Z88DK_PATH="/home/oscar/work/z88dk"
export ZCCCFG="${Z88DK_PATH}/lib/config"
export PATH="${Z88DK_PATH}/bin:${PATH}"

echo -e "${BLUE}Using Z88DK path: ${Z88DK_PATH}${NC}"
echo -e "${BLUE}Using config path: ${ZCCCFG}${NC}"
echo -e "${BLUE}Executing command:${NC}"
echo -e "zcc +zx \\
    -vn \\
    -startup=0 \\
    -clib=sdcc_iy \\
    -I${Z88DK_PATH}/include \\
    -I${Z88DK_PATH}/include/arch \\
    -create-app \\
    ${source_file} -o ${build_dir}/program"

# Compilation command
zcc +zx \
    -vn \
    -startup=0 \
    -clib=sdcc_iy \
    -create-app \
    "$source_file" -o "${build_dir}/program" 2>/tmp/build_error || handle_error "C compilation failed"

progress_bar 33

# Remove assembly and TAP generation steps since -create-app handles it
echo -e "\n${BLUE}Build complete...${NC}"
progress_bar 100
echo -e "\n"

# Launch message
echo -e "${GREEN}${BOLD}✨ Build successful!${NC}"
echo -e "${BLUE}Generated files in: ${build_dir}${NC}"

if [ $LAUNCH_EMULATOR -eq 1 ]; then
    echo -e "${BLUE}🎮 Launching ${EMULATOR}...${NC}"
    echo -e "Loading tape..."
    for i in {1..20}; do
        echo -ne "${BLUE}█${NC}"
        sleep 0.1
    done
    echo -e "\n"

    # Launch appropriate emulator
    case $EMULATOR in
        "zesarux")
            zesarux --noconfigfile --machine 48k --realvideo --nosplash --zoom 2 --tape "${build_dir}/program.tap" || handle_error "ZEsarUX failed to start"
            ;;
        "fuse")
            fuse --machine 48 --scale 2 --tape "${build_dir}/program.tap" || handle_error "FUSE failed to start"
            ;;
    esac
fi
