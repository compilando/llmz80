INSTRUCCIONES ESPECÍFICAS PARA AMSTRAD CPC:

1. ESTRUCTURA BÁSICA:
   - Incluye siempre los headers necesarios de CPCtelera (cpctelera.h, etc.)
   - Usa la función cpct_disableFirmware() al inicio para desactivar el firmware del CPC
   - Implementa un bucle principal (main loop) para juegos o aplicaciones interactivas

2. GRÁFICOS:
   - Usa las funciones de CPCtelera para dibujar: cpct_drawSprite, cpct_drawSolidBox, etc.
   - Recuerda que Amstrad CPC tiene 3 modos gráficos:
     * Modo 0: 160x200 con 16 colores (cpct_setVideoMode(0))
     * Modo 1: 320x200 con 4 colores (cpct_setVideoMode(1))
     * Modo 2: 640x200 con 2 colores (cpct_setVideoMode(2))
   - La paleta de colores se configura con cpct_setPalette() y cpct_setPALColour()
   - La memoria de vídeo comienza en 0xC000

3. SONIDO:
   - Usa las funciones de audio de CPCtelera para el chip AY-3-8912
   - Ejemplos: cpct_akp_musicInit, cpct_akp_musicPlay, cpct_akp_SFXInit, cpct_akp_SFXPlay

4. ENTRADA:
   - Lee el teclado con cpct_scanKeyboard() y cpct_isKeyPressed()
   - Lee el joystick con cpct_readJoystick()

5. OPTIMIZACIÓN:
   - Usa __z88dk_fastcall cuando sea posible para funciones con un solo parámetro
   - Aprovecha las macros de CPCtelera para operaciones comunes
   - Minimiza las operaciones de punto flotante, prioriza enteros

6. MEMORIA:
   - La memoria disponible para programas comienza en 0x4000
   - Evita escribir en áreas reservadas del sistema (0x0000-0x3FFF)
   - NO hay malloc ni memoria dinámica en Z80/CPCtelera
   - Usa arrays estáticos y pools de objetos para simular memoria dinámica

7. COMPILACIÓN:
   - El código debe ser compatible con CPCtelera
   - No uses características específicas de Z88DK que no estén en CPCtelera

8. ESTRUCTURAS DE DATOS:
   - Para implementar listas enlazadas, árboles u otras estructuras de datos, usa arrays estáticos (pools)
   - Define claramente la estructura con typedef y usa punteros para las conexiones
   - Implementa funciones para "asignar" y "liberar" nodos del pool
   - Inicializa todos los punteros a NULL antes de usarlos
   - Ejemplo de lista enlazada:
   ```c
   // Definición de la estructura Node
   typedef struct Node {
       u8 value;
       struct Node* next;
   } Node;

   // Pool de nodos
   #define MAX_NODES 20
   Node nodes_pool[MAX_NODES];
   u8 next_free_node = 0;

   // "Asignar" un nodo
   Node* allocate_node() {
       if (next_free_node < MAX_NODES) {
           return &nodes_pool[next_free_node++];
       }
       return NULL;
   }
   ```

9. SOLUCIÓN A ERRORES COMUNES:
   - Error con tipo 'u8': Asegúrate de incluir <cpctelera.h> antes de usar tipos como u8, u16, etc.
   - Error con constantes hexadecimales (0x0400, 0x0100): SDCC puede tener problemas con algunas constantes hexadecimales. Usa paréntesis o define constantes: #define ADDR_0x0400 0x0400
   - Error "Undefined identifier 'palette'": Debes definir las variables antes de usarlas. Para paletas, usa arrays de u8: u8 palette[16] = {0, 1, 2, 3...};
   - Error "converting integral to pointer without a cast": Usa casting explícito cuando conviertas entre tipos, especialmente con punteros: (u8*)0xC000 en lugar de 0xC000
   - Error con funciones de CPCtelera: Verifica que estás usando la sintaxis correcta. Muchas funciones requieren parámetros específicos.
   - Error "incompatible types": Asegúrate de que los tipos coincidan en asignaciones y parámetros de funciones. Usa casting cuando sea necesario.
   - Error con arrays: Declara los arrays con tamaño fijo: u8 my_array[10]; no u8 my_array[];
   - Error "function 'malloc' implicit declaration": NO hay malloc en Z80/CPCtelera. Usa arrays estáticos y pools de objetos.
   - Error "too many parameters": Verifica la firma correcta de la función en la documentación de CPCtelera.
   - Error "syntax error: token -> 'Node' o 'char'": Define las estructuras correctamente con typedef antes de usarlas.
   - Error "indirections to different types assignment": Usa casting explícito cuando asignes punteros de diferentes tipos.
   - Error "Pointer required": Asegúrate de usar el operador -> solo con punteros. Para variables no puntero, usa el operador punto (.).
   - Error "Undefined identifier 'animal', 'vegetal', 'mineral'": Declara todas las variables antes de usarlas, especialmente si son punteros a estructuras.

10. EJEMPLOS DE CÓDIGO CORRECTO:
   ```c
   #include <cpctelera.h>
   
   // Definición correcta de paleta
   const u8 g_palette[16] = {0, 3, 6, 9, 12, 15, 18, 21, 24, 26, 28, 30, 31, 22, 14, 6};
   
   // Definición correcta de una estructura
   typedef struct {
       u8 x;
       u8 y;
       u8 color;
   } Sprite;
   
   // Pool de sprites para simular memoria dinámica
   #define MAX_SPRITES 10
   Sprite sprites_pool[MAX_SPRITES];
   u8 next_free_sprite = 0;
   
   // Función para "asignar" un sprite
   Sprite* allocate_sprite() {
       if (next_free_sprite < MAX_SPRITES) {
           return &sprites_pool[next_free_sprite++];
       }
       return NULL; // No hay más sprites disponibles
   }
   
   void main(void) {
       // Desactivar firmware
       cpct_disableFirmware();
       
       // Establecer modo de vídeo (1 = 320x200, 4 colores)
       cpct_setVideoMode(1);
       
       // Establecer paleta de colores
       cpct_setPalette(g_palette, 16);
       
       // Crear un sprite usando nuestro pool
       Sprite* player = allocate_sprite();
       if (player != NULL) {
           player->x = 40;
           player->y = 100;
           player->color = 1;
       }
       
       // Dibujar un rectángulo sólido (con casting correcto para la dirección de memoria)
       cpct_drawSolidBox((void*)0xC000, 1, 40, 40);
       
       // Bucle principal
       while(1) {
           // Escanear teclado
           cpct_scanKeyboard();
           
           // Comprobar si se pulsa la tecla ESC
           if (cpct_isKeyPressed(Key_Esc)) {
               break;
           }
       }
   }
   ```

11. EJEMPLO DE JUEGO ANIVEMIN (ANIMAL, VEGETAL O MINERAL):
   - Para implementar un juego de adivinanzas como Anivemin, usa un árbol binario con un pool de nodos.
   - Define la estructura del nodo con campos para la pregunta, respuestas y categoría.
   - Inicializa todas las variables antes de usarlas.
   - Ejemplo básico:
   ```c
   // Definición de la estructura del nodo
   typedef struct Node {
       char question[40];           // Pregunta o respuesta
       struct Node* yes;            // Puntero al nodo si la respuesta es "sí"
       struct Node* no;             // Puntero al nodo si la respuesta es "no"
       u8 is_answer;                // 1 si es una respuesta final, 0 si es una pregunta
       u8 category;                 // 0=animal, 1=vegetal, 2=mineral
   } Node;

   // Variables globales para las categorías
   Node* animal = NULL;
   Node* vegetal = NULL;
   Node* mineral = NULL;
   Node* current_node = NULL;
   ```

RECUERDA: Amstrad CPC es diferente de ZX Spectrum. Asegúrate de usar las funciones y características específicas de Amstrad CPC y CPCtelera. 