                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module keyboard
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _updateKeyboardStatus
                             12 	.globl _cpct_isKeyPressed
                             13 	.globl _cpct_scanKeyboard
                             14 ;--------------------------------------------------------
                             15 ; special function registers
                             16 ;--------------------------------------------------------
                             17 ;--------------------------------------------------------
                             18 ; ram data
                             19 ;--------------------------------------------------------
                             20 	.area _DATA
                             21 ;--------------------------------------------------------
                             22 ; ram data
                             23 ;--------------------------------------------------------
                             24 	.area _INITIALIZED
                             25 ;--------------------------------------------------------
                             26 ; absolute external ram data
                             27 ;--------------------------------------------------------
                             28 	.area _DABS (ABS)
                             29 ;--------------------------------------------------------
                             30 ; global & static initialisations
                             31 ;--------------------------------------------------------
                             32 	.area _HOME
                             33 	.area _GSINIT
                             34 	.area _GSFINAL
                             35 	.area _GSINIT
                             36 ;--------------------------------------------------------
                             37 ; Home
                             38 ;--------------------------------------------------------
                             39 	.area _HOME
                             40 	.area _HOME
                             41 ;--------------------------------------------------------
                             42 ; code
                             43 ;--------------------------------------------------------
                             44 	.area _CODE
                             45 ;src/keyboard.c:27: void updateKeyboardStatus() {
                             46 ;	---------------------------------
                             47 ; Function updateKeyboardStatus
                             48 ; ---------------------------------
   0000                      49 _updateKeyboardStatus::
   0000 DD E5         [15]   50 	push	ix
   0002 DD 21 00 00   [14]   51 	ld	ix,#0
   0006 DD 39         [15]   52 	add	ix,sp
   0008 F5            [11]   53 	push	af
   0009 3B            [ 6]   54 	dec	sp
                             55 ;src/keyboard.c:32: cpct_scanKeyboard();
   000A CDr00r00      [17]   56 	call	_cpct_scanKeyboard
                             57 ;src/keyboard.c:39: k = g_keys;
   000D 01r00r00      [10]   58 	ld	bc, #_g_keys+0
                             59 ;src/keyboard.c:40: for(i=0; i < G_NKEYS; i++, k++) {
   0010 DD 36 FD 00   [19]   60 	ld	-3 (ix), #0x00
   0014                      61 00113$:
                             62 ;src/keyboard.c:42: if (cpct_isKeyPressed(k->key)) {
   0014 69            [ 4]   63 	ld	l, c
   0015 60            [ 4]   64 	ld	h, b
   0016 5E            [ 7]   65 	ld	e, (hl)
   0017 23            [ 6]   66 	inc	hl
   0018 66            [ 7]   67 	ld	h, (hl)
   0019 C5            [11]   68 	push	bc
   001A 6B            [ 4]   69 	ld	l, e
   001B CDr00r00      [17]   70 	call	_cpct_isKeyPressed
   001E DD 75 FF      [19]   71 	ld	-1 (ix), l
   0021 C1            [10]   72 	pop	bc
                             73 ;src/keyboard.c:45: switch(k->status) {
   0022 59            [ 4]   74 	ld	e, c
   0023 50            [ 4]   75 	ld	d, b
   0024 13            [ 6]   76 	inc	de
   0025 13            [ 6]   77 	inc	de
   0026 1A            [ 7]   78 	ld	a, (de)
   0027 6F            [ 4]   79 	ld	l,a
   0028 3D            [ 4]   80 	dec	a
   0029 20 04         [12]   81 	jr	NZ,00150$
   002B 3E 01         [ 7]   82 	ld	a,#0x01
   002D 18 01         [12]   83 	jr	00151$
   002F                      84 00150$:
   002F AF            [ 4]   85 	xor	a,a
   0030                      86 00151$:
   0030 67            [ 4]   87 	ld	h, a
   0031 7D            [ 4]   88 	ld	a, l
   0032 D6 03         [ 7]   89 	sub	a, #0x03
   0034 20 04         [12]   90 	jr	NZ,00152$
   0036 3E 01         [ 7]   91 	ld	a,#0x01
   0038 18 01         [12]   92 	jr	00153$
   003A                      93 00152$:
   003A AF            [ 4]   94 	xor	a,a
   003B                      95 00153$:
   003B DD 77 FE      [19]   96 	ld	-2 (ix), a
                             97 ;src/keyboard.c:42: if (cpct_isKeyPressed(k->key)) {
   003E DD 7E FF      [19]   98 	ld	a, -1 (ix)
   0041 B7            [ 4]   99 	or	a, a
   0042 28 1A         [12]  100 	jr	Z,00110$
                            101 ;src/keyboard.c:45: switch(k->status) {
   0044 7D            [ 4]  102 	ld	a, l
   0045 B7            [ 4]  103 	or	a, a
   0046 28 11         [12]  104 	jr	Z,00103$
   0048 7C            [ 4]  105 	ld	a, h
   0049 B7            [ 4]  106 	or	a, a
   004A 20 08         [12]  107 	jr	NZ,00101$
   004C DD 7E FE      [19]  108 	ld	a, -2 (ix)
   004F B7            [ 4]  109 	or	a, a
   0050 20 07         [12]  110 	jr	NZ,00103$
   0052 18 22         [12]  111 	jr	00114$
                            112 ;src/keyboard.c:47: case KeySt_Pressed:  { k->status = KeySt_StillPressed; break; }
   0054                     113 00101$:
   0054 3E 02         [ 7]  114 	ld	a, #0x02
   0056 12            [ 7]  115 	ld	(de), a
   0057 18 1D         [12]  116 	jr	00114$
                            117 ;src/keyboard.c:50: case KeySt_Released: { k->status = KeySt_Pressed; }
   0059                     118 00103$:
   0059 3E 01         [ 7]  119 	ld	a, #0x01
   005B 12            [ 7]  120 	ld	(de), a
                            121 ;src/keyboard.c:51: }
   005C 18 18         [12]  122 	jr	00114$
   005E                     123 00110$:
                            124 ;src/keyboard.c:55: switch(k->status) {
   005E 7C            [ 4]  125 	ld	a, h
   005F B7            [ 4]  126 	or	a, a
   0060 20 0D         [12]  127 	jr	NZ,00106$
   0062 7D            [ 4]  128 	ld	a, l
   0063 D6 02         [ 7]  129 	sub	a, #0x02
   0065 28 08         [12]  130 	jr	Z,00106$
   0067 DD 7E FE      [19]  131 	ld	a, -2 (ix)
   006A B7            [ 4]  132 	or	a, a
   006B 20 07         [12]  133 	jr	NZ,00107$
   006D 18 07         [12]  134 	jr	00114$
                            135 ;src/keyboard.c:58: case KeySt_StillPressed: { k->status = KeySt_Released; break; }
   006F                     136 00106$:
   006F 3E 03         [ 7]  137 	ld	a, #0x03
   0071 12            [ 7]  138 	ld	(de), a
   0072 18 02         [12]  139 	jr	00114$
                            140 ;src/keyboard.c:60: case KeySt_Released:     { k->status = KeySt_Free; }
   0074                     141 00107$:
   0074 AF            [ 4]  142 	xor	a, a
   0075 12            [ 7]  143 	ld	(de), a
                            144 ;src/keyboard.c:61: }         
   0076                     145 00114$:
                            146 ;src/keyboard.c:40: for(i=0; i < G_NKEYS; i++, k++) {
   0076 DD 34 FD      [23]  147 	inc	-3 (ix)
   0079 03            [ 6]  148 	inc	bc
   007A 03            [ 6]  149 	inc	bc
   007B 03            [ 6]  150 	inc	bc
   007C 03            [ 6]  151 	inc	bc
   007D 03            [ 6]  152 	inc	bc
   007E DD 7E FD      [19]  153 	ld	a, -3 (ix)
   0081 D6 04         [ 7]  154 	sub	a, #0x04
   0083 38 8F         [12]  155 	jr	C,00113$
   0085 DD F9         [10]  156 	ld	sp, ix
   0087 DD E1         [14]  157 	pop	ix
   0089 C9            [10]  158 	ret
                            159 	.area _CODE
                            160 	.area _INITIALIZER
                            161 	.area _CABS (ABS)
