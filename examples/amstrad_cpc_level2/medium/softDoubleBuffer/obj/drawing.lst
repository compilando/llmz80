                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module drawing
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _DrawUsingSpriteBackBuffer
                             12 	.globl _DrawUsingHardwareBackBuffer
                             13 	.globl _DrawDirectlyToScreen
                             14 	.globl _DrawSpriteBackBufferToScreen
                             15 	.globl _FlipBuffers
                             16 	.globl _GetSpriteBackBufferPtr
                             17 	.globl _GetBackBufferPtr
                             18 	.globl _GetScreenPtr
                             19 	.globl _cpct_waitVSYNC
                             20 	.globl _cpct_drawSpriteMaskedAlignedTable
                             21 	.globl _cpct_drawSpriteMasked
                             22 	.globl _cpct_drawSprite
                             23 	.globl _cpct_drawToSpriteBufferMaskedAlignedTable
                             24 	.globl _cpct_drawToSpriteBufferMasked
                             25 	.globl _cpct_drawToSpriteBuffer
                             26 	.globl _gDrawFunc
                             27 	.globl _gDrawFunction
                             28 	.globl _gPosScroll
                             29 	.globl _gNbTileset
                             30 	.globl _InitializeDrawing
                             31 	.globl _SelectDrawFunction
                             32 	.globl _ScrollAndDrawSpace
                             33 ;--------------------------------------------------------
                             34 ; special function registers
                             35 ;--------------------------------------------------------
                             36 ;--------------------------------------------------------
                             37 ; ram data
                             38 ;--------------------------------------------------------
                             39 	.area _DATA
   0000                      40 _gNbTileset::
   0000                      41 	.ds 1
   0001                      42 _gPosScroll::
   0001                      43 	.ds 1
   0002                      44 _gDrawFunction::
   0002                      45 	.ds 1
   0003                      46 _gDrawFunc::
   0003                      47 	.ds 2
                             48 ;--------------------------------------------------------
                             49 ; ram data
                             50 ;--------------------------------------------------------
                             51 	.area _INITIALIZED
                             52 ;--------------------------------------------------------
                             53 ; absolute external ram data
                             54 ;--------------------------------------------------------
                             55 	.area _DABS (ABS)
                             56 ;--------------------------------------------------------
                             57 ; global & static initialisations
                             58 ;--------------------------------------------------------
                             59 	.area _HOME
                             60 	.area _GSINIT
                             61 	.area _GSFINAL
                             62 	.area _GSINIT
                             63 ;--------------------------------------------------------
                             64 ; Home
                             65 ;--------------------------------------------------------
                             66 	.area _HOME
                             67 	.area _HOME
                             68 ;--------------------------------------------------------
                             69 ; code
                             70 ;--------------------------------------------------------
                             71 	.area _CODE
                             72 ;src/drawing.c:35: void InitializeDrawing() {
                             73 ;	---------------------------------
                             74 ; Function InitializeDrawing
                             75 ; ---------------------------------
   0000                      76 _InitializeDrawing::
                             77 ;src/drawing.c:36: gNbTileset = sizeof(g_tileset)/sizeof(u8*);
   0000 21r00r00      [10]   78 	ld	hl,#_gNbTileset + 0
   0003 36 0F         [10]   79 	ld	(hl), #0x0f
                             80 ;src/drawing.c:37: gPosScroll = 0;
   0005 21r01r00      [10]   81 	ld	hl,#_gPosScroll + 0
   0008 36 00         [10]   82 	ld	(hl), #0x00
                             83 ;src/drawing.c:38: SelectDrawFunction(1);
   000A 3E 01         [ 7]   84 	ld	a, #0x01
   000C F5            [11]   85 	push	af
   000D 33            [ 6]   86 	inc	sp
   000E CDr33r02      [17]   87 	call	_SelectDrawFunction
   0011 33            [ 6]   88 	inc	sp
   0012 C9            [10]   89 	ret
                             90 ;src/drawing.c:47: void DrawDirectlyToScreen() {
                             91 ;	---------------------------------
                             92 ; Function DrawDirectlyToScreen
                             93 ; ---------------------------------
   0013                      94 _DrawDirectlyToScreen::
   0013 DD E5         [15]   95 	push	ix
   0015 DD 21 00 00   [14]   96 	ld	ix,#0
   0019 DD 39         [15]   97 	add	ix,sp
   001B 3B            [ 6]   98 	dec	sp
                             99 ;src/drawing.c:51: cpct_waitVSYNC();
   001C CDr00r00      [17]  100 	call	_cpct_waitVSYNC
                            101 ;src/drawing.c:56: for(i = 0; i < VIEW_W_BYTES; i++) {
   001F DD 36 FF 00   [19]  102 	ld	-1 (ix), #0x00
   0023                     103 00102$:
                            104 ;src/drawing.c:58: u8 tile = (gPosScroll + i) % gNbTileset; 
   0023 21r01r00      [10]  105 	ld	hl,#_gPosScroll + 0
   0026 4E            [ 7]  106 	ld	c, (hl)
   0027 06 00         [ 7]  107 	ld	b, #0x00
   0029 DD 6E FF      [19]  108 	ld	l, -1 (ix)
   002C 26 00         [ 7]  109 	ld	h, #0x00
   002E 09            [11]  110 	add	hl,bc
   002F 4D            [ 4]  111 	ld	c, l
   0030 44            [ 4]  112 	ld	b, h
   0031 21r00r00      [10]  113 	ld	hl,#_gNbTileset + 0
   0034 5E            [ 7]  114 	ld	e, (hl)
   0035 16 00         [ 7]  115 	ld	d, #0x00
   0037 D5            [11]  116 	push	de
   0038 C5            [11]  117 	push	bc
   0039 CDr00r00      [17]  118 	call	__modsint
   003C F1            [10]  119 	pop	af
   003D F1            [10]  120 	pop	af
                            121 ;src/drawing.c:59: screenPtr = GetScreenPtr(VIEW_X + i, VIEW_Y);
   003E DD 7E FF      [19]  122 	ld	a, -1 (ix)
   0041 C6 0F         [ 7]  123 	add	a, #0x0f
   0043 47            [ 4]  124 	ld	b, a
   0044 E5            [11]  125 	push	hl
   0045 AF            [ 4]  126 	xor	a, a
   0046 F5            [11]  127 	push	af
   0047 33            [ 6]  128 	inc	sp
   0048 C5            [11]  129 	push	bc
   0049 33            [ 6]  130 	inc	sp
   004A CDr00r00      [17]  131 	call	_GetScreenPtr
   004D F1            [10]  132 	pop	af
   004E EB            [ 4]  133 	ex	de,hl
   004F E1            [10]  134 	pop	hl
                            135 ;src/drawing.c:62: cpct_drawSprite(g_tileset[tile], screenPtr, G_BACK_00_W, G_BACK_00_H);
   0050 26 00         [ 7]  136 	ld	h, #0x00
   0052 29            [11]  137 	add	hl, hl
   0053 01r00r00      [10]  138 	ld	bc, #_g_tileset
   0056 09            [11]  139 	add	hl, bc
   0057 4E            [ 7]  140 	ld	c, (hl)
   0058 23            [ 6]  141 	inc	hl
   0059 46            [ 7]  142 	ld	b, (hl)
   005A 21 01 3C      [10]  143 	ld	hl, #0x3c01
   005D E5            [11]  144 	push	hl
   005E D5            [11]  145 	push	de
   005F C5            [11]  146 	push	bc
   0060 CDr00r00      [17]  147 	call	_cpct_drawSprite
                            148 ;src/drawing.c:56: for(i = 0; i < VIEW_W_BYTES; i++) {
   0063 DD 34 FF      [23]  149 	inc	-1 (ix)
   0066 DD 7E FF      [19]  150 	ld	a, -1 (ix)
   0069 D6 32         [ 7]  151 	sub	a, #0x32
   006B 38 B6         [12]  152 	jr	C,00102$
                            153 ;src/drawing.c:68: screenPtr = GetScreenPtr(VIEW_X + POS_TITLE_X, 0);
   006D 21 1E 00      [10]  154 	ld	hl, #0x001e
   0070 E5            [11]  155 	push	hl
   0071 CDr00r00      [17]  156 	call	_GetScreenPtr
   0074 F1            [10]  157 	pop	af
   0075 4D            [ 4]  158 	ld	c, l
   0076 44            [ 4]  159 	ld	b, h
                            160 ;src/drawing.c:69: cpct_drawSpriteMaskedAlignedTable(g_title, screenPtr, G_TITLE_W, G_TITLE_H, gMaskTable);
   0077 11r00r00      [10]  161 	ld	de, #_gMaskTable
   007A D5            [11]  162 	push	de
   007B 21 14 10      [10]  163 	ld	hl, #0x1014
   007E E5            [11]  164 	push	hl
   007F C5            [11]  165 	push	bc
   0080 21r00r00      [10]  166 	ld	hl, #_g_title
   0083 E5            [11]  167 	push	hl
   0084 CDr00r00      [17]  168 	call	_cpct_drawSpriteMaskedAlignedTable
                            169 ;src/drawing.c:74: screenPtr = GetScreenPtr(VIEW_X + POS_SHIP_X, VIEW_Y + POS_SHIP_Y);
   0087 21 27 1E      [10]  170 	ld	hl, #0x1e27
   008A E5            [11]  171 	push	hl
   008B CDr00r00      [17]  172 	call	_GetScreenPtr
   008E F1            [10]  173 	pop	af
                            174 ;src/drawing.c:75: cpct_drawSpriteMasked(g_ship, screenPtr, G_SHIP_W, G_SHIP_H);
   008F 01r00r00      [10]  175 	ld	bc, #_g_ship+0
   0092 11 05 0A      [10]  176 	ld	de, #0x0a05
   0095 D5            [11]  177 	push	de
   0096 E5            [11]  178 	push	hl
   0097 C5            [11]  179 	push	bc
   0098 CDr00r00      [17]  180 	call	_cpct_drawSpriteMasked
                            181 ;src/drawing.c:83: const u8* fireSp = (gPosScroll % 2) ? g_fire_0 : g_fire_1;
   009B 21r01r00      [10]  182 	ld	hl,#_gPosScroll+0
   009E CB 46         [12]  183 	bit	0, (hl)
   00A0 28 05         [12]  184 	jr	Z,00106$
   00A2 01r00r00      [10]  185 	ld	bc, #_g_fire_0+0
   00A5 18 03         [12]  186 	jr	00107$
   00A7                     187 00106$:
   00A7 01r00r00      [10]  188 	ld	bc, #_g_fire_1+0
   00AA                     189 00107$:
                            190 ;src/drawing.c:86: screenPtr = GetScreenPtr(x, y);
   00AA C5            [11]  191 	push	bc
   00AB 21 26 20      [10]  192 	ld	hl, #0x2026
   00AE E5            [11]  193 	push	hl
   00AF CDr00r00      [17]  194 	call	_GetScreenPtr
   00B2 F1            [10]  195 	pop	af
   00B3 C1            [10]  196 	pop	bc
                            197 ;src/drawing.c:89: cpct_drawSpriteMaskedAlignedTable(fireSp, screenPtr, G_FIRE_0_W, G_FIRE_0_H, gMaskTable);
   00B4 11r00r00      [10]  198 	ld	de, #_gMaskTable
   00B7 D5            [11]  199 	push	de
   00B8 11 01 06      [10]  200 	ld	de, #0x0601
   00BB D5            [11]  201 	push	de
   00BC E5            [11]  202 	push	hl
   00BD C5            [11]  203 	push	bc
   00BE CDr00r00      [17]  204 	call	_cpct_drawSpriteMaskedAlignedTable
   00C1 33            [ 6]  205 	inc	sp
   00C2 DD E1         [14]  206 	pop	ix
   00C4 C9            [10]  207 	ret
                            208 ;src/drawing.c:100: void DrawUsingHardwareBackBuffer() {
                            209 ;	---------------------------------
                            210 ; Function DrawUsingHardwareBackBuffer
                            211 ; ---------------------------------
   00C5                     212 _DrawUsingHardwareBackBuffer::
   00C5 DD E5         [15]  213 	push	ix
   00C7 DD 21 00 00   [14]  214 	ld	ix,#0
   00CB DD 39         [15]  215 	add	ix,sp
   00CD F5            [11]  216 	push	af
                            217 ;src/drawing.c:107: for(i = 0; i < VIEW_W_BYTES; i++) {
   00CE DD 36 FE 00   [19]  218 	ld	-2 (ix), #0x00
   00D2                     219 00102$:
                            220 ;src/drawing.c:109: u8 tile = (gPosScroll + i)%gNbTileset; 
   00D2 21r01r00      [10]  221 	ld	hl,#_gPosScroll + 0
   00D5 4E            [ 7]  222 	ld	c, (hl)
   00D6 06 00         [ 7]  223 	ld	b, #0x00
   00D8 DD 6E FE      [19]  224 	ld	l, -2 (ix)
   00DB 26 00         [ 7]  225 	ld	h, #0x00
   00DD 09            [11]  226 	add	hl,bc
   00DE 4D            [ 4]  227 	ld	c, l
   00DF 44            [ 4]  228 	ld	b, h
   00E0 21r00r00      [10]  229 	ld	hl,#_gNbTileset + 0
   00E3 5E            [ 7]  230 	ld	e, (hl)
   00E4 16 00         [ 7]  231 	ld	d, #0x00
   00E6 D5            [11]  232 	push	de
   00E7 C5            [11]  233 	push	bc
   00E8 CDr00r00      [17]  234 	call	__modsint
   00EB F1            [10]  235 	pop	af
   00EC F1            [10]  236 	pop	af
                            237 ;src/drawing.c:110: backScreenPtr = GetBackBufferPtr(VIEW_X + i, VIEW_Y);
   00ED DD 7E FE      [19]  238 	ld	a, -2 (ix)
   00F0 C6 0F         [ 7]  239 	add	a, #0x0f
   00F2 47            [ 4]  240 	ld	b, a
   00F3 E5            [11]  241 	push	hl
   00F4 AF            [ 4]  242 	xor	a, a
   00F5 F5            [11]  243 	push	af
   00F6 33            [ 6]  244 	inc	sp
   00F7 C5            [11]  245 	push	bc
   00F8 33            [ 6]  246 	inc	sp
   00F9 CDr00r00      [17]  247 	call	_GetBackBufferPtr
   00FC F1            [10]  248 	pop	af
   00FD EB            [ 4]  249 	ex	de,hl
   00FE E1            [10]  250 	pop	hl
                            251 ;src/drawing.c:113: cpct_drawSprite(g_tileset[tile], backScreenPtr, G_BACK_00_W, G_BACK_00_H);     
   00FF 26 00         [ 7]  252 	ld	h, #0x00
   0101 29            [11]  253 	add	hl, hl
   0102 01r00r00      [10]  254 	ld	bc, #_g_tileset
   0105 09            [11]  255 	add	hl, bc
   0106 4E            [ 7]  256 	ld	c, (hl)
   0107 23            [ 6]  257 	inc	hl
   0108 46            [ 7]  258 	ld	b, (hl)
   0109 21 01 3C      [10]  259 	ld	hl, #0x3c01
   010C E5            [11]  260 	push	hl
   010D D5            [11]  261 	push	de
   010E C5            [11]  262 	push	bc
   010F CDr00r00      [17]  263 	call	_cpct_drawSprite
                            264 ;src/drawing.c:107: for(i = 0; i < VIEW_W_BYTES; i++) {
   0112 DD 34 FE      [23]  265 	inc	-2 (ix)
   0115 DD 7E FE      [19]  266 	ld	a, -2 (ix)
   0118 D6 32         [ 7]  267 	sub	a, #0x32
   011A 38 B6         [12]  268 	jr	C,00102$
                            269 ;src/drawing.c:119: backScreenPtr = GetBackBufferPtr(VIEW_X + POS_TITLE_X, 0);
   011C 21 1E 00      [10]  270 	ld	hl, #0x001e
   011F E5            [11]  271 	push	hl
   0120 CDr00r00      [17]  272 	call	_GetBackBufferPtr
   0123 F1            [10]  273 	pop	af
   0124 4D            [ 4]  274 	ld	c, l
   0125 44            [ 4]  275 	ld	b, h
                            276 ;src/drawing.c:120: cpct_drawSpriteMaskedAlignedTable(g_title, backScreenPtr, G_TITLE_W, G_TITLE_H, gMaskTable);
   0126 11r00r00      [10]  277 	ld	de, #_gMaskTable
   0129 D5            [11]  278 	push	de
   012A 21 14 10      [10]  279 	ld	hl, #0x1014
   012D E5            [11]  280 	push	hl
   012E C5            [11]  281 	push	bc
   012F 21r00r00      [10]  282 	ld	hl, #_g_title
   0132 E5            [11]  283 	push	hl
   0133 CDr00r00      [17]  284 	call	_cpct_drawSpriteMaskedAlignedTable
                            285 ;src/drawing.c:125: backScreenPtr = GetBackBufferPtr(VIEW_X + POS_SHIP_X, VIEW_Y + POS_SHIP_Y);
   0136 21 27 1E      [10]  286 	ld	hl, #0x1e27
   0139 E5            [11]  287 	push	hl
   013A CDr00r00      [17]  288 	call	_GetBackBufferPtr
   013D F1            [10]  289 	pop	af
                            290 ;src/drawing.c:126: cpct_drawSpriteMasked(g_ship, backScreenPtr, G_SHIP_W, G_SHIP_H);
   013E 01r00r00      [10]  291 	ld	bc, #_g_ship+0
   0141 11 05 0A      [10]  292 	ld	de, #0x0a05
   0144 D5            [11]  293 	push	de
   0145 E5            [11]  294 	push	hl
   0146 C5            [11]  295 	push	bc
   0147 CDr00r00      [17]  296 	call	_cpct_drawSpriteMasked
                            297 ;src/drawing.c:133: const u8* fireSp = (gPosScroll % 2) == 0 ? g_fire_0 : g_fire_1;
   014A 21r01r00      [10]  298 	ld	hl,#_gPosScroll+0
   014D CB 46         [12]  299 	bit	0, (hl)
   014F 20 05         [12]  300 	jr	NZ,00106$
   0151 01r00r00      [10]  301 	ld	bc, #_g_fire_0+0
   0154 18 03         [12]  302 	jr	00107$
   0156                     303 00106$:
   0156 01r00r00      [10]  304 	ld	bc, #_g_fire_1+0
   0159                     305 00107$:
                            306 ;src/drawing.c:136: backScreenPtr = GetBackBufferPtr(x, y);
   0159 C5            [11]  307 	push	bc
   015A 21 26 20      [10]  308 	ld	hl, #0x2026
   015D E5            [11]  309 	push	hl
   015E CDr00r00      [17]  310 	call	_GetBackBufferPtr
   0161 F1            [10]  311 	pop	af
   0162 C1            [10]  312 	pop	bc
                            313 ;src/drawing.c:138: cpct_drawSpriteMaskedAlignedTable(fireSp, backScreenPtr, G_FIRE_0_W, G_FIRE_0_H, gMaskTable);
   0163 11r00r00      [10]  314 	ld	de, #_gMaskTable
   0166 D5            [11]  315 	push	de
   0167 11 01 06      [10]  316 	ld	de, #0x0601
   016A D5            [11]  317 	push	de
   016B E5            [11]  318 	push	hl
   016C C5            [11]  319 	push	bc
   016D CDr00r00      [17]  320 	call	_cpct_drawSpriteMaskedAlignedTable
                            321 ;src/drawing.c:143: FlipBuffers();
   0170 CDr00r00      [17]  322 	call	_FlipBuffers
   0173 DD F9         [10]  323 	ld	sp, ix
   0175 DD E1         [14]  324 	pop	ix
   0177 C9            [10]  325 	ret
                            326 ;src/drawing.c:157: void DrawUsingSpriteBackBuffer() {
                            327 ;	---------------------------------
                            328 ; Function DrawUsingSpriteBackBuffer
                            329 ; ---------------------------------
   0178                     330 _DrawUsingSpriteBackBuffer::
   0178 DD E5         [15]  331 	push	ix
   017A 3B            [ 6]  332 	dec	sp
                            333 ;src/drawing.c:164: for(i = 0; i < VIEW_W_BYTES; i++) {
   017B 06 00         [ 7]  334 	ld	b, #0x00
   017D                     335 00102$:
                            336 ;src/drawing.c:166: u8 tile = (gPosScroll + i)%gNbTileset;
   017D 21r01r00      [10]  337 	ld	hl,#_gPosScroll + 0
   0180 5E            [ 7]  338 	ld	e, (hl)
   0181 16 00         [ 7]  339 	ld	d, #0x00
   0183 68            [ 4]  340 	ld	l, b
   0184 26 00         [ 7]  341 	ld	h, #0x00
   0186 19            [11]  342 	add	hl,de
   0187 EB            [ 4]  343 	ex	de,hl
   0188 FD 21r00r00   [14]  344 	ld	iy, #_gNbTileset
   018C FD 6E 00      [19]  345 	ld	l, 0 (iy)
   018F 26 00         [ 7]  346 	ld	h, #0x00
   0191 C5            [11]  347 	push	bc
   0192 E5            [11]  348 	push	hl
   0193 D5            [11]  349 	push	de
   0194 CDr00r00      [17]  350 	call	__modsint
   0197 F1            [10]  351 	pop	af
   0198 F1            [10]  352 	pop	af
   0199 C1            [10]  353 	pop	bc
   019A 4D            [ 4]  354 	ld	c, l
                            355 ;src/drawing.c:167: backBufferPtr = GetSpriteBackBufferPtr(i, 0);
   019B C5            [11]  356 	push	bc
   019C AF            [ 4]  357 	xor	a, a
   019D F5            [11]  358 	push	af
   019E 33            [ 6]  359 	inc	sp
   019F C5            [11]  360 	push	bc
   01A0 33            [ 6]  361 	inc	sp
   01A1 CDr00r00      [17]  362 	call	_GetSpriteBackBufferPtr
   01A4 F1            [10]  363 	pop	af
   01A5 EB            [ 4]  364 	ex	de,hl
   01A6 C1            [10]  365 	pop	bc
                            366 ;src/drawing.c:170: cpct_drawToSpriteBuffer(VIEW_W_BYTES, backBufferPtr, G_BACK_00_W, G_BACK_00_H, g_tileset[tile]);
   01A7 69            [ 4]  367 	ld	l, c
   01A8 26 00         [ 7]  368 	ld	h, #0x00
   01AA 29            [11]  369 	add	hl, hl
   01AB 3Er00         [ 7]  370 	ld	a, #<(_g_tileset)
   01AD 85            [ 4]  371 	add	a, l
   01AE 6F            [ 4]  372 	ld	l, a
   01AF 3Es00         [ 7]  373 	ld	a, #>(_g_tileset)
   01B1 8C            [ 4]  374 	adc	a, h
   01B2 67            [ 4]  375 	ld	h, a
   01B3 7E            [ 7]  376 	ld	a, (hl)
   01B4 23            [ 6]  377 	inc	hl
   01B5 66            [ 7]  378 	ld	h, (hl)
   01B6 6F            [ 4]  379 	ld	l, a
   01B7 C5            [11]  380 	push	bc
   01B8 E5            [11]  381 	push	hl
   01B9 21 01 3C      [10]  382 	ld	hl, #0x3c01
   01BC E5            [11]  383 	push	hl
   01BD D5            [11]  384 	push	de
   01BE 21 32 00      [10]  385 	ld	hl, #0x0032
   01C1 E5            [11]  386 	push	hl
   01C2 CDr00r00      [17]  387 	call	_cpct_drawToSpriteBuffer
   01C5 C1            [10]  388 	pop	bc
                            389 ;src/drawing.c:164: for(i = 0; i < VIEW_W_BYTES; i++) {
   01C6 04            [ 4]  390 	inc	b
   01C7 78            [ 4]  391 	ld	a, b
   01C8 D6 32         [ 7]  392 	sub	a, #0x32
   01CA 38 B1         [12]  393 	jr	C,00102$
                            394 ;src/drawing.c:176: backBufferPtr = GetSpriteBackBufferPtr(POS_TITLE_X, 0);
   01CC 21 0F 00      [10]  395 	ld	hl, #0x000f
   01CF E5            [11]  396 	push	hl
   01D0 CDr00r00      [17]  397 	call	_GetSpriteBackBufferPtr
   01D3 F1            [10]  398 	pop	af
   01D4 4D            [ 4]  399 	ld	c, l
   01D5 44            [ 4]  400 	ld	b, h
                            401 ;src/drawing.c:177: cpct_drawToSpriteBufferMaskedAlignedTable(VIEW_W_BYTES, backBufferPtr, G_TITLE_W, G_TITLE_H, g_title, gMaskTable);
   01D6 21r00r00      [10]  402 	ld	hl, #_gMaskTable
   01D9 11r00r00      [10]  403 	ld	de, #_g_title+0
   01DC E5            [11]  404 	push	hl
   01DD D5            [11]  405 	push	de
   01DE 21 14 10      [10]  406 	ld	hl, #0x1014
   01E1 E5            [11]  407 	push	hl
   01E2 C5            [11]  408 	push	bc
   01E3 21 32 00      [10]  409 	ld	hl, #0x0032
   01E6 E5            [11]  410 	push	hl
   01E7 CDr00r00      [17]  411 	call	_cpct_drawToSpriteBufferMaskedAlignedTable
                            412 ;src/drawing.c:182: backBufferPtr = GetSpriteBackBufferPtr(POS_SHIP_X, POS_SHIP_Y);
   01EA 21 18 1E      [10]  413 	ld	hl, #0x1e18
   01ED E5            [11]  414 	push	hl
   01EE CDr00r00      [17]  415 	call	_GetSpriteBackBufferPtr
   01F1 F1            [10]  416 	pop	af
                            417 ;src/drawing.c:183: cpct_drawToSpriteBufferMasked(VIEW_W_BYTES, backBufferPtr, G_SHIP_W, G_SHIP_H, g_ship);
   01F2 01r00r00      [10]  418 	ld	bc, #_g_ship+0
   01F5 C5            [11]  419 	push	bc
   01F6 01 05 0A      [10]  420 	ld	bc, #0x0a05
   01F9 C5            [11]  421 	push	bc
   01FA E5            [11]  422 	push	hl
   01FB 21 32 00      [10]  423 	ld	hl, #0x0032
   01FE E5            [11]  424 	push	hl
   01FF CDr00r00      [17]  425 	call	_cpct_drawToSpriteBufferMasked
                            426 ;src/drawing.c:190: const u8* fireSp = (gPosScroll % 2) == 0 ? g_fire_0 : g_fire_1;
   0202 21r01r00      [10]  427 	ld	hl,#_gPosScroll+0
   0205 CB 46         [12]  428 	bit	0, (hl)
   0207 20 05         [12]  429 	jr	NZ,00106$
   0209 01r00r00      [10]  430 	ld	bc, #_g_fire_0+0
   020C 18 03         [12]  431 	jr	00107$
   020E                     432 00106$:
   020E 01r00r00      [10]  433 	ld	bc, #_g_fire_1+0
   0211                     434 00107$:
                            435 ;src/drawing.c:193: backBufferPtr = GetSpriteBackBufferPtr(x, y);
   0211 C5            [11]  436 	push	bc
   0212 21 17 20      [10]  437 	ld	hl, #0x2017
   0215 E5            [11]  438 	push	hl
   0216 CDr00r00      [17]  439 	call	_GetSpriteBackBufferPtr
   0219 F1            [10]  440 	pop	af
   021A C1            [10]  441 	pop	bc
                            442 ;src/drawing.c:195: cpct_drawToSpriteBufferMaskedAlignedTable(VIEW_W_BYTES, backBufferPtr, G_FIRE_0_W, G_FIRE_0_H, fireSp, gMaskTable);
   021B 11r00r00      [10]  443 	ld	de, #_gMaskTable
   021E D5            [11]  444 	push	de
   021F C5            [11]  445 	push	bc
   0220 01 01 06      [10]  446 	ld	bc, #0x0601
   0223 C5            [11]  447 	push	bc
   0224 E5            [11]  448 	push	hl
   0225 21 32 00      [10]  449 	ld	hl, #0x0032
   0228 E5            [11]  450 	push	hl
   0229 CDr00r00      [17]  451 	call	_cpct_drawToSpriteBufferMaskedAlignedTable
                            452 ;src/drawing.c:199: DrawSpriteBackBufferToScreen();
   022C CDr00r00      [17]  453 	call	_DrawSpriteBackBufferToScreen
   022F 33            [ 6]  454 	inc	sp
   0230 DD E1         [14]  455 	pop	ix
   0232 C9            [10]  456 	ret
                            457 ;src/drawing.c:207: void SelectDrawFunction(u8 drawFuncNb) {
                            458 ;	---------------------------------
                            459 ; Function SelectDrawFunction
                            460 ; ---------------------------------
   0233                     461 _SelectDrawFunction::
                            462 ;src/drawing.c:209: switch(drawFuncNb) {
   0233 FD 21 02 00   [14]  463 	ld	iy, #2
   0237 FD 39         [15]  464 	add	iy, sp
   0239 FD 7E 00      [19]  465 	ld	a, 0 (iy)
   023C 3D            [ 4]  466 	dec	a
   023D 28 09         [12]  467 	jr	Z,00101$
   023F FD 7E 00      [19]  468 	ld	a, 0 (iy)
   0242 D6 02         [ 7]  469 	sub	a, #0x02
   0244 28 0F         [12]  470 	jr	Z,00102$
   0246 18 1A         [12]  471 	jr	00103$
                            472 ;src/drawing.c:210: case 1:  gDrawFunc = DrawDirectlyToScreen;         break;
   0248                     473 00101$:
   0248 FD 21r03r00   [14]  474 	ld	iy, #_gDrawFunc
   024C FD 36 00r13   [19]  475 	ld	0 (iy), #<(_DrawDirectlyToScreen)
   0250 FD 36 01s00   [19]  476 	ld	1 (iy), #>(_DrawDirectlyToScreen)
   0254 C9            [10]  477 	ret
                            478 ;src/drawing.c:211: case 2:  gDrawFunc = DrawUsingHardwareBackBuffer;  break;
   0255                     479 00102$:
   0255 FD 21r03r00   [14]  480 	ld	iy, #_gDrawFunc
   0259 FD 36 00rC5   [19]  481 	ld	0 (iy), #<(_DrawUsingHardwareBackBuffer)
   025D FD 36 01s00   [19]  482 	ld	1 (iy), #>(_DrawUsingHardwareBackBuffer)
   0261 C9            [10]  483 	ret
                            484 ;src/drawing.c:212: default: gDrawFunc = DrawUsingSpriteBackBuffer;
   0262                     485 00103$:
   0262 FD 21r03r00   [14]  486 	ld	iy, #_gDrawFunc
   0266 FD 36 00r78   [19]  487 	ld	0 (iy), #<(_DrawUsingSpriteBackBuffer)
   026A FD 36 01s01   [19]  488 	ld	1 (iy), #>(_DrawUsingSpriteBackBuffer)
                            489 ;src/drawing.c:213: }
   026E C9            [10]  490 	ret
                            491 ;src/drawing.c:223: void ScrollAndDrawSpace() { 
                            492 ;	---------------------------------
                            493 ; Function ScrollAndDrawSpace
                            494 ; ---------------------------------
   026F                     495 _ScrollAndDrawSpace::
                            496 ;src/drawing.c:225: gPosScroll++;
   026F 21r01r00      [10]  497 	ld	hl, #_gPosScroll+0
   0272 34            [11]  498 	inc	(hl)
                            499 ;src/drawing.c:226: gDrawFunc(); 
   0273 2Ar03r00      [16]  500 	ld	hl, (_gDrawFunc)
   0276 C3r00r00      [10]  501 	jp  ___sdcc_call_hl
                            502 	.area _CODE
                            503 	.area _INITIALIZER
                            504 	.area _CABS (ABS)
