                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _printMessages
                             13 	.globl _myInterruptHandler
                             14 	.globl _cpct_setPALColour
                             15 	.globl _cpct_drawStringM1
                             16 	.globl _cpct_setDrawCharM1
                             17 	.globl _cpct_setInterruptHandler
                             18 	.globl _cpct_disableFirmware
                             19 ;--------------------------------------------------------
                             20 ; special function registers
                             21 ;--------------------------------------------------------
                             22 ;--------------------------------------------------------
                             23 ; ram data
                             24 ;--------------------------------------------------------
                             25 	.area _DATA
   0000                      26 _myInterruptHandler_i_1_128:
   0000                      27 	.ds 1
                             28 ;--------------------------------------------------------
                             29 ; ram data
                             30 ;--------------------------------------------------------
                             31 	.area _INITIALIZED
                             32 ;--------------------------------------------------------
                             33 ; absolute external ram data
                             34 ;--------------------------------------------------------
                             35 	.area _DABS (ABS)
                             36 ;--------------------------------------------------------
                             37 ; global & static initialisations
                             38 ;--------------------------------------------------------
                             39 	.area _HOME
                             40 	.area _GSINIT
                             41 	.area _GSFINAL
                             42 	.area _GSINIT
                             43 ;--------------------------------------------------------
                             44 ; Home
                             45 ;--------------------------------------------------------
                             46 	.area _HOME
                             47 	.area _HOME
                             48 ;--------------------------------------------------------
                             49 ; code
                             50 ;--------------------------------------------------------
                             51 	.area _CODE
                             52 ;src/main.c:30: void myInterruptHandler() {
                             53 ;	---------------------------------
                             54 ; Function myInterruptHandler
                             55 ; ---------------------------------
   0000                      56 _myInterruptHandler::
                             57 ;src/main.c:34: cpct_setBorder(i+1);
   0000 21r00r00      [10]   58 	ld	hl,#_myInterruptHandler_i_1_128 + 0
   0003 46            [ 7]   59 	ld	b, (hl)
   0004 04            [ 4]   60 	inc	b
   0005 C5            [11]   61 	push	bc
   0006 33            [ 6]   62 	inc	sp
   0007 3E 10         [ 7]   63 	ld	a, #0x10
   0009 F5            [11]   64 	push	af
   000A 33            [ 6]   65 	inc	sp
   000B CDr00r00      [17]   66 	call	_cpct_setPALColour
                             67 ;src/main.c:37: if (++i > 5) i=0;
   000E FD 21r00r00   [14]   68 	ld	iy, #_myInterruptHandler_i_1_128
   0012 FD 34 00      [23]   69 	inc	0 (iy)
   0015 3E 05         [ 7]   70 	ld	a, #0x05
   0017 FD 96 00      [19]   71 	sub	a, 0 (iy)
   001A D0            [11]   72 	ret	NC
   001B FD 36 00 00   [19]   73 	ld	0 (iy), #0x00
   001F C9            [10]   74 	ret
                             75 ;src/main.c:43: void printMessages() {
                             76 ;	---------------------------------
                             77 ; Function printMessages
                             78 ; ---------------------------------
   0020                      79 _printMessages::
                             80 ;src/main.c:45: cpct_setDrawCharM1(0, 3);
   0020 21 00 03      [10]   81 	ld	hl, #0x0300
   0023 E5            [11]   82 	push	hl
   0024 CDr00r00      [17]   83 	call	_cpct_setDrawCharM1
                             84 ;src/main.c:46: cpct_drawStringM1("Interrupt Handler Example", pvm);
   0027 21 00 C0      [10]   85 	ld	hl, #0xc000
   002A E5            [11]   86 	push	hl
   002B 21r71r00      [10]   87 	ld	hl, #___str_0
   002E E5            [11]   88 	push	hl
   002F CDr00r00      [17]   89 	call	_cpct_drawStringM1
                             90 ;src/main.c:49: cpct_setDrawCharM1(1, 0);
   0032 21 01 00      [10]   91 	ld	hl, #0x0001
   0035 E5            [11]   92 	push	hl
   0036 CDr00r00      [17]   93 	call	_cpct_setDrawCharM1
                             94 ;src/main.c:50: cpct_drawStringM1("This example is running a void loop, but", pvm);
   0039 21 F0 C0      [10]   95 	ld	hl, #0xc0f0
   003C E5            [11]   96 	push	hl
   003D 21r8Br00      [10]   97 	ld	hl, #___str_1
   0040 E5            [11]   98 	push	hl
   0041 CDr00r00      [17]   99 	call	_cpct_drawStringM1
                            100 ;src/main.c:52: cpct_drawStringM1("border color is changed 6 times each", pvm);
   0044 21 40 C1      [10]  101 	ld	hl, #0xc140
   0047 E5            [11]  102 	push	hl
   0048 21rB4r00      [10]  103 	ld	hl, #___str_2
   004B E5            [11]  104 	push	hl
   004C CDr00r00      [17]  105 	call	_cpct_drawStringM1
                            106 ;src/main.c:54: cpct_drawStringM1("frame. This change  is done by the inte-", pvm);
   004F 21 90 C1      [10]  107 	ld	hl, #0xc190
   0052 E5            [11]  108 	push	hl
   0053 21rD9r00      [10]  109 	ld	hl, #___str_3
   0056 E5            [11]  110 	push	hl
   0057 CDr00r00      [17]  111 	call	_cpct_drawStringM1
                            112 ;src/main.c:56: cpct_drawStringM1("rrupt handler. As z80 produces 300 inte-", pvm);
   005A 21 E0 C1      [10]  113 	ld	hl, #0xc1e0
   005D E5            [11]  114 	push	hl
   005E 21r02r01      [10]  115 	ld	hl, #___str_4
   0061 E5            [11]  116 	push	hl
   0062 CDr00r00      [17]  117 	call	_cpct_drawStringM1
                            118 ;src/main.c:58: cpct_drawStringM1("rrupts per second, you have 6 per frame.", pvm);
   0065 21 30 C2      [10]  119 	ld	hl, #0xc230
   0068 E5            [11]  120 	push	hl
   0069 21r2Br01      [10]  121 	ld	hl, #___str_5
   006C E5            [11]  122 	push	hl
   006D CDr00r00      [17]  123 	call	_cpct_drawStringM1
   0070 C9            [10]  124 	ret
   0071                     125 ___str_0:
   0071 49 6E 74 65 72 72   126 	.ascii "Interrupt Handler Example"
        75 70 74 20 48 61
        6E 64 6C 65 72 20
        45 78 61 6D 70 6C
        65
   008A 00                  127 	.db 0x00
   008B                     128 ___str_1:
   008B 54 68 69 73 20 65   129 	.ascii "This example is running a void loop, but"
        78 61 6D 70 6C 65
        20 69 73 20 72 75
        6E 6E 69 6E 67 20
        61 20 76 6F 69 64
        20 6C 6F 6F 70 2C
        20 62 75 74
   00B3 00                  130 	.db 0x00
   00B4                     131 ___str_2:
   00B4 62 6F 72 64 65 72   132 	.ascii "border color is changed 6 times each"
        20 63 6F 6C 6F 72
        20 69 73 20 63 68
        61 6E 67 65 64 20
        36 20 74 69 6D 65
        73 20 65 61 63 68
   00D8 00                  133 	.db 0x00
   00D9                     134 ___str_3:
   00D9 66 72 61 6D 65 2E   135 	.ascii "frame. This change  is done by the inte-"
        20 54 68 69 73 20
        63 68 61 6E 67 65
        20 20 69 73 20 64
        6F 6E 65 20 62 79
        20 74 68 65 20 69
        6E 74 65 2D
   0101 00                  136 	.db 0x00
   0102                     137 ___str_4:
   0102 72 72 75 70 74 20   138 	.ascii "rrupt handler. As z80 produces 300 inte-"
        68 61 6E 64 6C 65
        72 2E 20 41 73 20
        7A 38 30 20 70 72
        6F 64 75 63 65 73
        20 33 30 30 20 69
        6E 74 65 2D
   012A 00                  139 	.db 0x00
   012B                     140 ___str_5:
   012B 72 72 75 70 74 73   141 	.ascii "rrupts per second, you have 6 per frame."
        20 70 65 72 20 73
        65 63 6F 6E 64 2C
        20 79 6F 75 20 68
        61 76 65 20 36 20
        70 65 72 20 66 72
        61 6D 65 2E
   0153 00                  142 	.db 0x00
                            143 ;src/main.c:65: void main(void) {
                            144 ;	---------------------------------
                            145 ; Function main
                            146 ; ---------------------------------
   0154                     147 _main::
                            148 ;src/main.c:69: cpct_disableFirmware();
   0154 CDr00r00      [17]  149 	call	_cpct_disableFirmware
                            150 ;src/main.c:70: cpct_setInterruptHandler( myInterruptHandler );
   0157 21r00r00      [10]  151 	ld	hl, #_myInterruptHandler
   015A CDr00r00      [17]  152 	call	_cpct_setInterruptHandler
                            153 ;src/main.c:73: printMessages();
   015D CDr20r00      [17]  154 	call	_printMessages
                            155 ;src/main.c:77: while (1);
   0160                     156 00102$:
   0160 18 FE         [12]  157 	jr	00102$
                            158 	.area _CODE
                            159 	.area _INITIALIZER
                            160 	.area _CABS (ABS)
