                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module message
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _cpct_drawStringM0
                             12 	.globl _cpct_setDrawCharM0
                             13 	.globl _g_message
                             14 	.globl _drawMessage
                             15 	.globl _strcpy
                             16 	.globl _concatNum
                             17 ;--------------------------------------------------------
                             18 ; special function registers
                             19 ;--------------------------------------------------------
                             20 ;--------------------------------------------------------
                             21 ; ram data
                             22 ;--------------------------------------------------------
                             23 	.area _DATA
   0000                      24 _g_message::
   0000                      25 	.ds 17
                             26 ;--------------------------------------------------------
                             27 ; ram data
                             28 ;--------------------------------------------------------
                             29 	.area _INITIALIZED
                             30 ;--------------------------------------------------------
                             31 ; absolute external ram data
                             32 ;--------------------------------------------------------
                             33 	.area _DABS (ABS)
                             34 ;--------------------------------------------------------
                             35 ; global & static initialisations
                             36 ;--------------------------------------------------------
                             37 	.area _HOME
                             38 	.area _GSINIT
                             39 	.area _GSFINAL
                             40 	.area _GSINIT
                             41 ;--------------------------------------------------------
                             42 ; Home
                             43 ;--------------------------------------------------------
                             44 	.area _HOME
                             45 	.area _HOME
                             46 ;--------------------------------------------------------
                             47 ; code
                             48 ;--------------------------------------------------------
                             49 	.area _CODE
                             50 ;src/msg/message.c:26: void drawMessage() {
                             51 ;	---------------------------------
                             52 ; Function drawMessage
                             53 ; ---------------------------------
   0000                      54 _drawMessage::
                             55 ;src/msg/message.c:28: if (g_message.time > 1) {
   0000 01r00r00      [10]   56 	ld	bc, #_g_message+0
   0003 21r10r00      [10]   57 	ld	hl, #(_g_message + 0x0010) + 0
   0006 5E            [ 7]   58 	ld	e, (hl)
                             59 ;src/msg/message.c:31: cpct_drawStringM0(g_message.str, g_message.videopos);
                             60 ;src/msg/message.c:28: if (g_message.time > 1) {
   0007 3E 01         [ 7]   61 	ld	a, #0x01
   0009 93            [ 4]   62 	sub	a, e
   000A 30 1E         [12]   63 	jr	NC,00104$
                             64 ;src/msg/message.c:30: cpct_setDrawCharM0(1, 0);
   000C C5            [11]   65 	push	bc
   000D 21 01 00      [10]   66 	ld	hl, #0x0001
   0010 E5            [11]   67 	push	hl
   0011 CDr00r00      [17]   68 	call	_cpct_setDrawCharM0
                             69 ;src/msg/message.c:31: cpct_drawStringM0(g_message.str, g_message.videopos);
   0014 E1            [10]   70 	pop	hl
   0015 4E            [ 7]   71 	ld	c, (hl)
   0016 23            [ 6]   72 	inc	hl
   0017 46            [ 7]   73 	ld	b, (hl)
   0018 C5            [11]   74 	push	bc
   0019 21r02r00      [10]   75 	ld	hl, #(_g_message + 0x0002)
   001C E5            [11]   76 	push	hl
   001D CDr00r00      [17]   77 	call	_cpct_drawStringM0
                             78 ;src/msg/message.c:32: g_message.time--;
   0020 21r10r00      [10]   79 	ld	hl, #(_g_message + 0x0010) + 0
   0023 4E            [ 7]   80 	ld	c, (hl)
   0024 0D            [ 4]   81 	dec	c
   0025 21r10r00      [10]   82 	ld	hl, #(_g_message + 0x0010)
   0028 71            [ 7]   83 	ld	(hl), c
   0029 C9            [10]   84 	ret
   002A                      85 00104$:
                             86 ;src/msg/message.c:33: } else if (g_message.time > 0) {
   002A 7B            [ 4]   87 	ld	a, e
   002B B7            [ 4]   88 	or	a, a
   002C C8            [11]   89 	ret	Z
                             90 ;src/msg/message.c:35: cpct_setDrawCharM0(0, 0);
   002D C5            [11]   91 	push	bc
   002E 21 00 00      [10]   92 	ld	hl, #0x0000
   0031 E5            [11]   93 	push	hl
   0032 CDr00r00      [17]   94 	call	_cpct_setDrawCharM0
                             95 ;src/msg/message.c:36: cpct_drawStringM0(g_message.str, g_message.videopos);
   0035 E1            [10]   96 	pop	hl
   0036 4E            [ 7]   97 	ld	c, (hl)
   0037 23            [ 6]   98 	inc	hl
   0038 46            [ 7]   99 	ld	b, (hl)
   0039 C5            [11]  100 	push	bc
   003A 21r02r00      [10]  101 	ld	hl, #(_g_message + 0x0002)
   003D E5            [11]  102 	push	hl
   003E CDr00r00      [17]  103 	call	_cpct_drawStringM0
                            104 ;src/msg/message.c:37: g_message.time=0;
   0041 21r10r00      [10]  105 	ld	hl, #(_g_message + 0x0010)
   0044 36 00         [10]  106 	ld	(hl), #0x00
   0046 C9            [10]  107 	ret
                            108 ;src/msg/message.c:44: void strcpy(i8* to, const i8* from){
                            109 ;	---------------------------------
                            110 ; Function strcpy
                            111 ; ---------------------------------
   0047                     112 _strcpy::
                            113 ;src/msg/message.c:45: while (*to++ = *from++);
   0047 21 04 00      [10]  114 	ld	hl, #4
   004A 39            [11]  115 	add	hl, sp
   004B 4E            [ 7]  116 	ld	c, (hl)
   004C 23            [ 6]  117 	inc	hl
   004D 46            [ 7]  118 	ld	b, (hl)
   004E 21 02 00      [10]  119 	ld	hl, #2
   0051 39            [11]  120 	add	hl, sp
   0052 5E            [ 7]  121 	ld	e, (hl)
   0053 23            [ 6]  122 	inc	hl
   0054 56            [ 7]  123 	ld	d, (hl)
   0055                     124 00101$:
   0055 0A            [ 7]  125 	ld	a, (bc)
   0056 03            [ 6]  126 	inc	bc
   0057 12            [ 7]  127 	ld	(de), a
   0058 13            [ 6]  128 	inc	de
   0059 B7            [ 4]  129 	or	a, a
   005A 20 F9         [12]  130 	jr	NZ,00101$
   005C C9            [10]  131 	ret
                            132 ;src/msg/message.c:52: void concatNum (i8* to, i8 num) {
                            133 ;	---------------------------------
                            134 ; Function concatNum
                            135 ; ---------------------------------
   005D                     136 _concatNum::
   005D DD E5         [15]  137 	push	ix
   005F DD 21 00 00   [14]  138 	ld	ix,#0
   0063 DD 39         [15]  139 	add	ix,sp
   0065 21 FA FF      [10]  140 	ld	hl, #-6
   0068 39            [11]  141 	add	hl, sp
   0069 F9            [ 6]  142 	ld	sp, hl
                            143 ;src/msg/message.c:53: i8 digits[5] = { 32, 48, 48, 48, 0 };
   006A 21 01 00      [10]  144 	ld	hl, #0x0001
   006D 39            [11]  145 	add	hl, sp
   006E 4D            [ 4]  146 	ld	c,l
   006F 44            [ 4]  147 	ld	b,h
   0070 36 20         [10]  148 	ld	(hl),#0x20
   0072 69            [ 4]  149 	ld	l, c
   0073 60            [ 4]  150 	ld	h, b
   0074 23            [ 6]  151 	inc	hl
   0075 36 30         [10]  152 	ld	(hl), #0x30
   0077 69            [ 4]  153 	ld	l, c
   0078 60            [ 4]  154 	ld	h, b
   0079 23            [ 6]  155 	inc	hl
   007A 23            [ 6]  156 	inc	hl
   007B 36 30         [10]  157 	ld	(hl), #0x30
   007D 69            [ 4]  158 	ld	l, c
   007E 60            [ 4]  159 	ld	h, b
   007F 23            [ 6]  160 	inc	hl
   0080 23            [ 6]  161 	inc	hl
   0081 23            [ 6]  162 	inc	hl
   0082 36 30         [10]  163 	ld	(hl), #0x30
   0084 21 04 00      [10]  164 	ld	hl, #0x0004
   0087 09            [11]  165 	add	hl, bc
   0088 36 00         [10]  166 	ld	(hl), #0x00
                            167 ;src/msg/message.c:57: if (num < 0) {
   008A DD CB 06 7E   [20]  168 	bit	7, 6 (ix)
   008E 28 0A         [12]  169 	jr	Z,00102$
                            170 ;src/msg/message.c:58: unum = -num;
   0090 AF            [ 4]  171 	xor	a, a
   0091 DD 96 06      [19]  172 	sub	a, 6 (ix)
   0094 57            [ 4]  173 	ld	d, a
                            174 ;src/msg/message.c:59: digits[0]=45;
   0095 3E 2D         [ 7]  175 	ld	a, #0x2d
   0097 02            [ 7]  176 	ld	(bc), a
   0098 18 03         [12]  177 	jr	00113$
   009A                     178 00102$:
                            179 ;src/msg/message.c:61: unum = num;
   009A DD 56 06      [19]  180 	ld	d, 6 (ix)
                            181 ;src/msg/message.c:65: for (d=3; d != 0; --d) {
   009D                     182 00113$:
   009D 1E 03         [ 7]  183 	ld	e, #0x03
   009F                     184 00106$:
                            185 ;src/msg/message.c:66: u8 r=unum % 10;
   009F C5            [11]  186 	push	bc
   00A0 D5            [11]  187 	push	de
   00A1 3E 0A         [ 7]  188 	ld	a, #0x0a
   00A3 F5            [11]  189 	push	af
   00A4 33            [ 6]  190 	inc	sp
   00A5 D5            [11]  191 	push	de
   00A6 33            [ 6]  192 	inc	sp
   00A7 CDr00r00      [17]  193 	call	__moduchar
   00AA F1            [10]  194 	pop	af
   00AB D1            [10]  195 	pop	de
                            196 ;src/msg/message.c:67: unum /= 10;
   00AC DD 75 FA      [19]  197 	ld	-6 (ix), l
   00AF D5            [11]  198 	push	de
   00B0 3E 0A         [ 7]  199 	ld	a, #0x0a
   00B2 F5            [11]  200 	push	af
   00B3 33            [ 6]  201 	inc	sp
   00B4 D5            [11]  202 	push	de
   00B5 33            [ 6]  203 	inc	sp
   00B6 CDr00r00      [17]  204 	call	__divuchar
   00B9 F1            [10]  205 	pop	af
   00BA D1            [10]  206 	pop	de
   00BB C1            [10]  207 	pop	bc
   00BC 55            [ 4]  208 	ld	d, l
                            209 ;src/msg/message.c:68: digits[d]=48 + r;
   00BD 6B            [ 4]  210 	ld	l,e
   00BE 26 00         [ 7]  211 	ld	h,#0x00
   00C0 09            [11]  212 	add	hl, bc
   00C1 DD 7E FA      [19]  213 	ld	a, -6 (ix)
   00C4 C6 30         [ 7]  214 	add	a, #0x30
   00C6 77            [ 7]  215 	ld	(hl), a
                            216 ;src/msg/message.c:65: for (d=3; d != 0; --d) {
   00C7 1D            [ 4]  217 	dec e
   00C8 20 D5         [12]  218 	jr	NZ,00106$
                            219 ;src/msg/message.c:73: for (d=0; d<5; d++){
   00CA DD 5E 04      [19]  220 	ld	e, 4 (ix)
   00CD DD 56 05      [19]  221 	ld	d, 5 (ix)
   00D0 D5            [11]  222 	push	de
   00D1 FD E1         [14]  223 	pop	iy
   00D3 1E 00         [ 7]  224 	ld	e, #0x00
   00D5                     225 00108$:
                            226 ;src/msg/message.c:74: *to++ = digits[d];
   00D5 6B            [ 4]  227 	ld	l,e
   00D6 26 00         [ 7]  228 	ld	h,#0x00
   00D8 09            [11]  229 	add	hl, bc
   00D9 56            [ 7]  230 	ld	d, (hl)
   00DA FD 72 00      [19]  231 	ld	0 (iy), d
   00DD FD 23         [10]  232 	inc	iy
                            233 ;src/msg/message.c:73: for (d=0; d<5; d++){
   00DF 1C            [ 4]  234 	inc	e
   00E0 7B            [ 4]  235 	ld	a, e
   00E1 D6 05         [ 7]  236 	sub	a, #0x05
   00E3 38 F0         [12]  237 	jr	C,00108$
   00E5 DD F9         [10]  238 	ld	sp, ix
   00E7 DD E1         [14]  239 	pop	ix
   00E9 C9            [10]  240 	ret
                            241 	.area _CODE
                            242 	.area _INITIALIZER
                            243 	.area _CABS (ABS)
