ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                              1 ;;-----------------------------LICENSE NOTICE------------------------------------
                              2 ;;  This file is part of CPCtelera: An Amstrad CPC Game Engine 
                              3 ;;  Copyright (C) 2016 ronaldo / Fremos / Cheesetea / ByteRealms (@FranGallegoBR)
                              4 ;;
                              5 ;;  This program is free software: you can redistribute it and/or modify
                              6 ;;  it under the terms of the GNU Lesser General Public License as published by
                              7 ;;  the Free Software Foundation, either version 3 of the License, or
                              8 ;;  (at your option) any later version.
                              9 ;;
                             10 ;;  This program is distributed in the hope that it will be useful,
                             11 ;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                             12 ;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                             13 ;;  GNU Lesser General Public License for more details.
                             14 ;;
                             15 ;;  You should have received a copy of the GNU Lesser General Public License
                             16 ;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             17 ;;-------------------------------------------------------------------------------
                             18 
                             19 ;;===============================================================================
                             20 ;; DEFINED CONSTANTS
                             21 ;;===============================================================================
                             22 
                     C000    23 pvideomem      = 0xC000  ;; First byte of video memory
                     8000    24 pbackbuffer    = 0x8000  ;; First byte of the hardware backbuffer
                     0004    25 palete_size    = 4       ;; Number of total palette colours
                     0010    26 border_colour  = 0x0010  ;; 0x10 (Border ID), 0x00 (Colour to set: White).
                     0050    27 screen_Width   = 0x50    ;; Width of the screen in bytes (80 bytes, 0x50)
                     3214    28 tile_HxW       = 0x3214  ;; Height (50 pixels or bytes,  0x32) 
                             29                          ;; Width  (80 pixels, 20 bytes, 0x14) 1 byte = 4 pixels
                     9119    30 knight_WxH     = 0x9119  ;; Height (145 pixels or bytes,  0x91) 
                     0019    31 knight_Width   = 0x19    ;; Width  (100 pixels, 25 bytes, 0x19) 1 byte = 4 pixels
                     39E0    32 knight_offset  = 0x39E0  ;; Offset for location (0,55) with respect to screen (0,0)
                             33 
                             34 ;;===============================================================================
                             35 ;; DATA SECTION
                             36 ;;===============================================================================
                             37 
                             38 .area _DATA
                             39 
                             40 ;; Sprites and palette are defined in an external file. As they are
                             41 ;; defined in C language, their symbols will be preceded by an underscore.
                             42 ;; We declare sprite symbols here as global, and the linker will look
                             43 ;; for them on the other file.
                             44 .globl _g_tileset
                             45 .globl _g_palette
                             46 .globl _g_spr_knight
                             47 
                             48 ;; Location offsets for background tiles
                             49 ;;    There are 16 background tiles, each one taking 80x50 pixels. As tiles
                             50 ;; will always be at the same place with respect to the origin og the background
                             51 ;; (coordinate (0,0), top-left corner of the background), we can pre-calculate
                             52 ;; their offset in bytes with respect to the origin. Next array contains the
                             53 ;; pre-calculated 16 offsets, which will let easily draw the background by
                             54 ;; taking each tile and drawing it at origin + offset.
   0000                      55 bg_tile_offsets:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



                             56 ;; COLUMN |   0   |  80   |  160  |  240  |   ROW
                             57 ;;--------------------------------------------------
   0000 00 00 14 00 28 00    58        .dw 0x0000, 0x0014, 0x0028, 0x003C  ;;   0
        3C 00
   0008 E0 11 F4 11 08 12    59        .dw 0x11E0, 0x11F4, 0x1208, 0x121C  ;;  50
        1C 12
   0010 C0 23 D4 23 E8 23    60        .dw 0x23C0, 0x23D4, 0x23E8, 0x23FC  ;; 100
        FC 23
   0018 A0 35 B4 35 C8 35    61        .dw 0x35A0, 0x35B4, 0x35C8, 0x35DC  ;; 150
        DC 35
                             62 ;;--------------------------------------------------
                             63 
                             64 
                             65 ;;===============================================================================
                             66 ;; CODE SECTION
                             67 ;;===============================================================================
                             68 
                             69 .area _CODE
                             70 
                             71 ;; Include macros to easily manage undocumented opcodes
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



                             72 .include "macros/cpct_undocumentedOpcodes.h.s"
                              1 ;;-----------------------------LICENSE NOTICE------------------------------------
                              2 ;;  This file is part of CPCtelera: An Amstrad CPC Game Engine 
                              3 ;;  Copyright (C) 2021 ronaldo / Fremos / Cheesetea / ByteRealms (@FranGallegoBR)
                              4 ;;
                              5 ;;  This program is free software: you can redistribute it and/or modify
                              6 ;;  it under the terms of the GNU Lesser General Public License as published by
                              7 ;;  the Free Software Foundation, either version 3 of the License, or
                              8 ;;  (at your option) any later version.
                              9 ;;
                             10 ;;  This program is distributed in the hope that it will be useful,
                             11 ;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                             12 ;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                             13 ;;  GNU Lesser General Public License for more details.
                             14 ;;
                             15 ;;  You should have received a copy of the GNU Lesser General Public License
                             16 ;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             17 ;;-------------------------------------------------------------------------------
                             18 
                             19 ;;
                             20 ;; File: Undocumented Opcodes
                             21 ;;
                             22 ;;    Macros to clarify source code when using undocumented opcodes. Only
                             23 ;; valid to be used from assembly language (not from C).
                             24 ;;
                             25 
                             26 ;; Macro: jr__0
                             27 ;;    Opcode for "JR #0" instruction
                             28 ;; 
                             29 .mdelete jr__0
                             30 .macro jr__0
                             31    .DW #0x0018  ;; JR #00 (Normally used as a modifiable jump, as jr 0 is an infinite loop)
                             32 .endm
                             33 
                             34 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                             35 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                             36 ;; SLL Instructions
                             37 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                             38 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                             39 
                             40 ;; Macro: sll__b
                             41 ;;    Opcode for "SLL b" instruction
                             42 ;; 
                             43 .mdelete sll__b
                             44 .macro sll__b
                             45    .db #0xCB, #0x30  ;; Opcode for sll b
                             46 .endm
                             47 
                             48 ;; Macro: sll__c
                             49 ;;    Opcode for "SLL c" instruction
                             50 ;; 
                             51 .mdelete sll__c
                             52 .macro sll__c
                             53    .db #0xCB, #0x31  ;; Opcode for sll c
                             54 .endm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



                             55 
                             56 ;; Macro: sll__d
                             57 ;;    Opcode for "SLL d" instruction
                             58 ;; 
                             59 .mdelete sll__d
                             60 .macro sll__d
                             61    .db #0xCB, #0x32  ;; Opcode for sll d
                             62 .endm
                             63 
                             64 ;; Macro: sll__e
                             65 ;;    Opcode for "SLL e" instruction
                             66 ;; 
                             67 .mdelete sll__e
                             68 .macro sll__e
                             69    .db #0xCB, #0x33  ;; Opcode for sll e
                             70 .endm
                             71 
                             72 ;; Macro: sll__h
                             73 ;;    Opcode for "SLL h" instruction
                             74 ;; 
                             75 .mdelete sll__h
                             76 .macro sll__h
                             77    .db #0xCB, #0x34  ;; Opcode for sll h
                             78 .endm
                             79 
                             80 ;; Macro: sll__l
                             81 ;;    Opcode for "SLL l" instruction
                             82 ;; 
                             83 .mdelete sll__l
                             84 .macro sll__l
                             85    .db #0xCB, #0x35  ;; Opcode for sll l
                             86 .endm
                             87 
                             88 ;; Macro: sll___hl_
                             89 ;;    Opcode for "SLL (hl)" instruction
                             90 ;; 
                             91 .mdelete sll___hl_
                             92 .macro sll___hl_
                             93    .db #0xCB, #0x36  ;; Opcode for sll (hl)
                             94 .endm
                             95 
                             96 ;; Macro: sll__a
                             97 ;;    Opcode for "SLL a" instruction
                             98 ;; 
                             99 .mdelete sll__a
                            100 .macro sll__a
                            101    .db #0xCB, #0x37  ;; Opcode for sll a
                            102 .endm
                            103 
                            104 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                            105 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                            106 ;; IXL Related Macros
                            107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                            108 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                            109 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]



                            110 ;; Macro: ld__ixl    Value
                            111 ;;    Opcode for "LD ixl, Value" instruction
                            112 ;;  
                            113 ;; Parameters:
                            114 ;;    Value - An inmediate 8-bits value that will be loaded into ixl
                            115 ;; 
                            116 .mdelete ld__ixl
                            117 .macro ld__ixl    Value 
                            118    .db #0xDD, #0x2E, Value  ;; Opcode for ld ixl, Value
                            119 .endm
                            120 
                            121 ;; Macro: ld__ixl_a
                            122 ;;    Opcode for "LD ixl, a" instruction
                            123 ;; 
                            124 .mdelete ld__ixl_a
                            125 .macro ld__ixl_a
                            126    .dw #0x6FDD  ;; Opcode for ld ixl, a
                            127 .endm
                            128 
                            129 ;; Macro: ld__ixl_b
                            130 ;;    Opcode for "LD ixl, B" instruction
                            131 ;; 
                            132 .mdelete ld__ixl_b
                            133 .macro ld__ixl_b
                            134    .dw #0x68DD  ;; Opcode for ld ixl, b
                            135 .endm
                            136 
                            137 ;; Macro: ld__ixl_c
                            138 ;;    Opcode for "LD ixl, C" instruction
                            139 ;; 
                            140 .mdelete ld__ixl_c
                            141 .macro ld__ixl_c
                            142    .dw #0x69DD  ;; Opcode for ld ixl, c
                            143 .endm
                            144 
                            145 ;; Macro: ld__ixl_d
                            146 ;;    Opcode for "LD ixl, D" instruction
                            147 ;; 
                            148 .mdelete ld__ixl_d
                            149 .macro ld__ixl_d
                            150    .dw #0x6ADD  ;; Opcode for ld ixl, d
                            151 .endm
                            152 
                            153 ;; Macro: ld__ixl_e
                            154 ;;    Opcode for "LD ixl, E" instruction
                            155 ;; 
                            156 .mdelete ld__ixl_e
                            157 .macro ld__ixl_e
                            158    .dw #0x6BDD  ;; Opcode for ld ixl, e
                            159 .endm
                            160 
                            161 ;; Macro: ld__ixl_ixh
                            162 ;;    Opcode for "LD ixl, IXH" instruction
                            163 ;; 
                            164 .mdelete  ld__ixl_ixh
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.
Hexadecimal [16-Bits]



                            165 .macro ld__ixl_ixh
                            166    .dw #0x6CDD  ;; Opcode for ld ixl, ixh
                            167 .endm
                            168 
                            169 ;; Macro: ld__a_ixl
                            170 ;;    Opcode for "LD A, ixl" instruction
                            171 ;; 
                            172 .mdelete ld__a_ixl
                            173 .macro ld__a_ixl
                            174    .dw #0x7DDD  ;; Opcode for ld a, ixl
                            175 .endm
                            176 
                            177 ;; Macro: ld__b_ixl
                            178 ;;    Opcode for "LD B, ixl" instruction
                            179 ;; 
                            180 .mdelete ld__b_ixl
                            181 .macro ld__b_ixl
                            182    .dw #0x45DD  ;; Opcode for ld b, ixl
                            183 .endm
                            184 
                            185 ;; Macro: ld__c_ixl
                            186 ;;    Opcode for "LD c, ixl" instruction
                            187 ;; 
                            188 .mdelete ld__c_ixl
                            189 .macro ld__c_ixl
                            190    .dw #0x4DDD  ;; Opcode for ld c, ixl
                            191 .endm
                            192 
                            193 ;; Macro: ld__d_ixl
                            194 ;;    Opcode for "LD D, ixl" instruction
                            195 ;; 
                            196 .mdelete ld__d_ixl
                            197 .macro ld__d_ixl
                            198    .dw #0x55DD  ;; Opcode for ld d, ixl
                            199 .endm
                            200 
                            201 ;; Macro: ld__e_ixl
                            202 ;;    Opcode for "LD e, ixl" instruction
                            203 ;; 
                            204 .mdelete ld__e_ixl
                            205 .macro ld__e_ixl
                            206    .dw #0x5DDD  ;; Opcode for ld e, ixl
                            207 .endm
                            208 
                            209 ;; Macro: add__ixl
                            210 ;;    Opcode for "Add ixl" instruction
                            211 ;; 
                            212 .mdelete add__ixl
                            213 .macro add__ixl
                            214    .dw #0x85DD  ;; Opcode for add ixl
                            215 .endm
                            216 
                            217 ;; Macro: sub__ixl
                            218 ;;    Opcode for "SUB ixl" instruction
                            219 ;; 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 7.
Hexadecimal [16-Bits]



                            220 .mdelete sub__ixl
                            221 .macro sub__ixl
                            222    .dw #0x95DD  ;; Opcode for sub ixl
                            223 .endm
                            224 
                            225 ;; Macro: adc__ixl
                            226 ;;    Opcode for "ADC ixl" instruction
                            227 ;; 
                            228 .mdelete adc__ixl
                            229 .macro adc__ixl
                            230    .dw #0x8DDD  ;; Opcode for adc ixl
                            231 .endm
                            232 
                            233 ;; Macro: sbc__ixl
                            234 ;;    Opcode for "SBC ixl" instruction
                            235 ;; 
                            236 .mdelete sbc__ixl
                            237 .macro sbc__ixl
                            238    .dw #0x9DDD  ;; Opcode for sbc ixl
                            239 .endm
                            240 
                            241 ;; Macro: and__ixl
                            242 ;;    Opcode for "AND ixl" instruction
                            243 ;; 
                            244 .mdelete and__ixl
                            245 .macro and__ixl
                            246    .dw #0xA5DD  ;; Opcode for and ixl
                            247 .endm
                            248 
                            249 ;; Macro: or__ixl
                            250 ;;    Opcode for "OR ixl" instruction
                            251 ;; 
                            252 .mdelete or__ixl
                            253 .macro or__ixl
                            254    .dw #0xB5DD  ;; Opcode for or ixl
                            255 .endm
                            256 
                            257 ;; Macro: xor__ixl
                            258 ;;    Opcode for "XOR ixl" instruction
                            259 ;; 
                            260 .mdelete xor__ixl
                            261 .macro xor__ixl
                            262    .dw #0xADDD  ;; Opcode for xor ixl
                            263 .endm
                            264 
                            265 ;; Macro: cp__ixl
                            266 ;;    Opcode for "CP ixl" instruction
                            267 ;; 
                            268 .mdelete cp__ixl
                            269 .macro cp__ixl
                            270    .dw #0xBDDD  ;; Opcode for cp ixl
                            271 .endm
                            272 
                            273 ;; Macro: dec__ixl
                            274 ;;    Opcode for "DEC ixl" instruction
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 8.
Hexadecimal [16-Bits]



                            275 ;; 
                            276 .mdelete dec__ixl
                            277 .macro dec__ixl
                            278    .dw #0x2DDD  ;; Opcode for dec ixl
                            279 .endm
                            280 
                            281 ;; Macro: inc__ixl
                            282 ;;    Opcode for "INC ixl" instruction
                            283 ;; 
                            284 .mdelete inc__ixl
                            285 .macro inc__ixl
                            286    .dw #0x2CDD  ;; Opcode for inc ixl
                            287 .endm
                            288 
                            289 
                            290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                            291 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                            292 ;; IXH Related Macros
                            293 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                            294 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                            295 
                            296 ;; Macro: ld__ixh    Value
                            297 ;;    Opcode for "LD IXH, Value" instruction
                            298 ;;  
                            299 ;; Parameters:
                            300 ;;    Value - An inmediate 8-bits value that will be loaded into IXH
                            301 ;; 
                            302 .mdelete  ld__ixh
                            303 .macro ld__ixh    Value 
                            304    .db #0xDD, #0x26, Value  ;; Opcode for ld ixh, Value
                            305 .endm
                            306 
                            307 ;; Macro: ld__ixh_a
                            308 ;;    Opcode for "LD IXH, a" instruction
                            309 ;; 
                            310 .mdelete ld__ixh_a
                            311 .macro ld__ixh_a
                            312    .dw #0x67DD  ;; Opcode for ld ixh, a
                            313 .endm
                            314 
                            315 ;; Macro: ld__ixh_b
                            316 ;;    Opcode for "LD IXH, B" instruction
                            317 ;; 
                            318 .mdelete ld__ixh_b
                            319 .macro ld__ixh_b
                            320    .dw #0x60DD  ;; Opcode for ld ixh, b
                            321 .endm
                            322 
                            323 ;; Macro: ld__ixh_c
                            324 ;;    Opcode for "LD IXH, C" instruction
                            325 ;; 
                            326 .mdelete ld__ixh_c
                            327 .macro ld__ixh_c
                            328    .dw #0x61DD  ;; Opcode for ld ixh, c
                            329 .endm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 9.
Hexadecimal [16-Bits]



                            330 
                            331 ;; Macro: ld__ixh_d
                            332 ;;    Opcode for "LD IXH, D" instruction
                            333 ;; 
                            334 .mdelete ld__ixh_d
                            335 .macro ld__ixh_d
                            336    .dw #0x62DD  ;; Opcode for ld ixh, d
                            337 .endm
                            338 
                            339 ;; Macro: ld__ixh_e
                            340 ;;    Opcode for "LD IXH, E" instruction
                            341 ;; 
                            342 .mdelete ld__ixh_e
                            343 .macro ld__ixh_e
                            344    .dw #0x63DD  ;; Opcode for ld ixh, e
                            345 .endm
                            346 
                            347 ;; Macro: ld__ixh_ixl
                            348 ;;    Opcode for "LD IXH, IXL" instruction
                            349 ;; 
                            350 .mdelete ld__ixh_ixl
                            351 .macro ld__ixh_ixl
                            352    .dw #0x65DD  ;; Opcode for ld ixh, ixl
                            353 .endm
                            354 
                            355 ;; Macro: ld__a_ixh
                            356 ;;    Opcode for "LD A, IXH" instruction
                            357 ;; 
                            358 .mdelete ld__a_ixh
                            359 .macro ld__a_ixh
                            360    .dw #0x7CDD  ;; Opcode for ld a, ixh
                            361 .endm
                            362 
                            363 ;; Macro: ld__b_ixh
                            364 ;;    Opcode for "LD B, IXH" instruction
                            365 ;; 
                            366 .mdelete ld__b_ixh
                            367 .macro ld__b_ixh
                            368    .dw #0x44DD  ;; Opcode for ld b, ixh
                            369 .endm
                            370 
                            371 ;; Macro: ld__c_ixh
                            372 ;;    Opcode for "LD c, IXH" instruction
                            373 ;; 
                            374 .mdelete ld__c_ixh
                            375 .macro ld__c_ixh
                            376    .dw #0x4CDD  ;; Opcode for ld c, ixh
                            377 .endm
                            378 
                            379 ;; Macro: ld__d_ixh
                            380 ;;    Opcode for "LD D, IXH" instruction
                            381 ;; 
                            382 .mdelete ld__d_ixh
                            383 .macro ld__d_ixh
                            384    .dw #0x54DD  ;; Opcode for ld d, ixh
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 10.
Hexadecimal [16-Bits]



                            385 .endm
                            386 
                            387 ;; Macro: ld__e_ixh
                            388 ;;    Opcode for "LD e, IXH" instruction
                            389 ;; 
                            390 .mdelete ld__e_ixh
                            391 .macro ld__e_ixh
                            392    .dw #0x5CDD  ;; Opcode for ld e, ixh
                            393 .endm
                            394 
                            395 ;; Macro: add__ixh
                            396 ;;    Opcode for "ADD IXH" instruction
                            397 ;; 
                            398 .mdelete add__ixh
                            399 .macro add__ixh
                            400    .dw #0x84DD  ;; Opcode for add ixh
                            401 .endm
                            402 
                            403 ;; Macro: sub__ixh
                            404 ;;    Opcode for "SUB IXH" instruction
                            405 ;; 
                            406 .mdelete sub__ixh
                            407 .macro sub__ixh
                            408    .dw #0x94DD  ;; Opcode for sub ixh
                            409 .endm
                            410 
                            411 ;; Macro: adc__ixh
                            412 ;;    Opcode for "ADC IXH" instruction
                            413 ;; 
                            414 .mdelete adc__ixh
                            415 .macro adc__ixh
                            416    .dw #0x8CDD  ;; Opcode for adc ixh
                            417 .endm
                            418 
                            419 ;; Macro: sbc__ixh
                            420 ;;    Opcode for "SBC IXH" instruction
                            421 ;; 
                            422 .mdelete sbc__ixh
                            423 .macro sbc__ixh
                            424    .dw #0x9CDD  ;; Opcode for sbc ixh
                            425 .endm
                            426 
                            427 ;; Macro: and__ixh
                            428 ;;    Opcode for "AND IXH" instruction
                            429 ;; 
                            430 .mdelete and__ixh
                            431 .macro and__ixh
                            432    .dw #0xA4DD  ;; Opcode for and ixh
                            433 .endm
                            434 
                            435 ;; Macro: or__ixh
                            436 ;;    Opcode for "OR IXH" instruction
                            437 ;; 
                            438 .mdelete or__ixh
                            439 .macro or__ixh
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 11.
Hexadecimal [16-Bits]



                            440    .dw #0xB4DD  ;; Opcode for or ixh
                            441 .endm
                            442 
                            443 ;; Macro: xor__ixh
                            444 ;;    Opcode for "XOR IXH" instruction
                            445 ;; 
                            446 .mdelete xor__ixh
                            447 .macro xor__ixh
                            448    .dw #0xACDD  ;; Opcode for xor ixh
                            449 .endm
                            450 
                            451 ;; Macro: cp__ixh
                            452 ;;    Opcode for "CP IXH" instruction
                            453 ;; 
                            454 .mdelete cp__ixh
                            455 .macro cp__ixh
                            456    .dw #0xBCDD  ;; Opcode for cp ixh
                            457 .endm
                            458 
                            459 ;; Macro: dec__ixh
                            460 ;;    Opcode for "DEC IXH" instruction
                            461 ;; 
                            462 .mdelete dec__ixh
                            463 .macro dec__ixh
                            464    .dw #0x25DD  ;; Opcode for dec ixh
                            465 .endm
                            466 
                            467 ;; Macro: inc__ixh
                            468 ;;    Opcode for "INC IXH" instruction
                            469 ;; 
                            470 .mdelete inc__ixh
                            471 .macro inc__ixh
                            472    .dw #0x24DD  ;; Opcode for inc ixh
                            473 .endm
                            474 
                            475 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                            476 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                            477 ;; IYL Related Macros
                            478 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                            479 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                            480 
                            481 ;; Macro: ld__iyl    Value
                            482 ;;    Opcode for "LD iyl, Value" instruction
                            483 ;;  
                            484 ;; Parameters:
                            485 ;;    Value - An inmediate 8-bits value that will be loaded into iyl
                            486 ;; 
                            487 .mdelete  ld__iyl
                            488 .macro ld__iyl    Value 
                            489    .db #0xFD, #0x2E, Value  ;; Opcode for ld iyl, Value
                            490 .endm
                            491 
                            492 ;; Macro: ld__iyl_a
                            493 ;;    Opcode for "LD iyl, a" instruction
                            494 ;; 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 12.
Hexadecimal [16-Bits]



                            495 .mdelete ld__iyl_a
                            496 .macro ld__iyl_a
                            497    .dw #0x6FFD  ;; Opcode for ld iyl, a
                            498 .endm
                            499 
                            500 ;; Macro: ld__iyl_b
                            501 ;;    Opcode for "LD iyl, B" instruction
                            502 ;; 
                            503 .mdelete ld__iyl_b
                            504 .macro ld__iyl_b
                            505    .dw #0x68FD  ;; Opcode for ld iyl, b
                            506 .endm
                            507 
                            508 ;; Macro: ld__iyl_c
                            509 ;;    Opcode for "LD iyl, C" instruction
                            510 ;; 
                            511 .mdelete ld__iyl_c
                            512 .macro ld__iyl_c
                            513    .dw #0x69FD  ;; Opcode for ld iyl, c
                            514 .endm
                            515 
                            516 ;; Macro: ld__iyl_d
                            517 ;;    Opcode for "LD iyl, D" instruction
                            518 ;; 
                            519 .mdelete ld__iyl_d
                            520 .macro ld__iyl_d
                            521    .dw #0x6AFD  ;; Opcode for ld iyl, d
                            522 .endm
                            523 
                            524 ;; Macro: ld__iyl_e
                            525 ;;    Opcode for "LD iyl, E" instruction
                            526 ;; 
                            527 .mdelete ld__iyl_e
                            528 .macro ld__iyl_e
                            529    .dw #0x6BFD  ;; Opcode for ld iyl, e
                            530 .endm
                            531 
                            532 ;; Macro: ld__iyl_iyh
                            533 ;;    Opcode for "LD iyl, IXL" instruction
                            534 ;; 
                            535 .mdelete  ld__iyl_iyh
                            536 .macro ld__iyl_iyh
                            537    .dw #0x6CFD  ;; Opcode for ld iyl, ixl
                            538 .endm
                            539 
                            540 ;; Macro: ld__a_iyl
                            541 ;;    Opcode for "LD A, iyl" instruction
                            542 ;; 
                            543 .mdelete ld__a_iyl
                            544 .macro ld__a_iyl
                            545    .dw #0x7DFD  ;; Opcode for ld a, iyl
                            546 .endm
                            547 
                            548 ;; Macro: ld__b_iyl
                            549 ;;    Opcode for "LD B, iyl" instruction
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 13.
Hexadecimal [16-Bits]



                            550 ;; 
                            551 .mdelete ld__b_iyl
                            552 .macro ld__b_iyl
                            553    .dw #0x45FD  ;; Opcode for ld b, iyl
                            554 .endm
                            555 
                            556 ;; Macro: ld__c_iyl
                            557 ;;    Opcode for "LD c, iyl" instruction
                            558 ;; 
                            559 .mdelete ld__c_iyl
                            560 .macro ld__c_iyl
                            561    .dw #0x4DFD  ;; Opcode for ld c, iyl
                            562 .endm
                            563 
                            564 ;; Macro: ld__d_iyl
                            565 ;;    Opcode for "LD D, iyl" instruction
                            566 ;; 
                            567 .mdelete ld__d_iyl
                            568 .macro ld__d_iyl
                            569    .dw #0x55FD  ;; Opcode for ld d, iyl
                            570 .endm
                            571 
                            572 ;; Macro: ld__e_iyl
                            573 ;;    Opcode for "LD e, iyl" instruction
                            574 ;; 
                            575 .mdelete ld__e_iyl
                            576 .macro ld__e_iyl
                            577    .dw #0x5DFD  ;; Opcode for ld e, iyl
                            578 .endm
                            579 
                            580 ;; Macro: add__iyl
                            581 ;;    Opcode for "Add iyl" instruction
                            582 ;; 
                            583 .mdelete add__iyl
                            584 .macro add__iyl
                            585    .dw #0x85FD  ;; Opcode for add iyl
                            586 .endm
                            587 
                            588 ;; Macro: sub__iyl
                            589 ;;    Opcode for "SUB iyl" instruction
                            590 ;; 
                            591 .mdelete sub__iyl
                            592 .macro sub__iyl
                            593    .dw #0x95FD  ;; Opcode for sub iyl
                            594 .endm
                            595 
                            596 ;; Macro: adc__iyl
                            597 ;;    Opcode for "ADC iyl" instruction
                            598 ;; 
                            599 .mdelete adc__iyl
                            600 .macro adc__iyl
                            601    .dw #0x8DFD  ;; Opcode for adc iyl
                            602 .endm
                            603 
                            604 ;; Macro: sbc__iyl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 14.
Hexadecimal [16-Bits]



                            605 ;;    Opcode for "SBC iyl" instruction
                            606 ;; 
                            607 .mdelete sbc__iyl
                            608 .macro sbc__iyl
                            609    .dw #0x9DFD  ;; Opcode for sbc iyl
                            610 .endm
                            611 
                            612 ;; Macro: and__iyl
                            613 ;;    Opcode for "AND iyl" instruction
                            614 ;; 
                            615 .mdelete and__iyl
                            616 .macro and__iyl
                            617    .dw #0xA5FD  ;; Opcode for and iyl
                            618 .endm
                            619 
                            620 ;; Macro: or__iyl
                            621 ;;    Opcode for "OR iyl" instruction
                            622 ;; 
                            623 .mdelete or__iyl
                            624 .macro or__iyl
                            625    .dw #0xB5FD  ;; Opcode for or iyl
                            626 .endm
                            627 
                            628 ;; Macro: xor__iyl
                            629 ;;    Opcode for "XOR iyl" instruction
                            630 ;; 
                            631 .mdelete xor__iyl
                            632 .macro xor__iyl
                            633    .dw #0xADFD  ;; Opcode for xor iyl
                            634 .endm
                            635 
                            636 ;; Macro: cp__iyl
                            637 ;;    Opcode for "CP iyl" instruction
                            638 ;; 
                            639 .mdelete cp__iyl
                            640 .macro cp__iyl
                            641    .dw #0xBDFD  ;; Opcode for cp iyl
                            642 .endm
                            643 
                            644 ;; Macro: dec__iyl
                            645 ;;    Opcode for "DEC iyl" instruction
                            646 ;; 
                            647 .mdelete dec__iyl
                            648 .macro dec__iyl
                            649    .dw #0x2DFD  ;; Opcode for dec iyl
                            650 .endm
                            651 
                            652 ;; Macro: inc__iyl
                            653 ;;    Opcode for "INC iyl" instruction
                            654 ;; 
                            655 .mdelete inc__iyl
                            656 .macro inc__iyl
                            657    .dw #0x2CFD  ;; Opcode for inc iyl
                            658 .endm
                            659 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 15.
Hexadecimal [16-Bits]



                            660 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                            661 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                            662 ;; IYH Related Macros
                            663 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                            664 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                            665 
                            666 ;; Macro: ld__iyh    Value
                            667 ;;    Opcode for "LD iyh, Value" instruction
                            668 ;;  
                            669 ;; Parameters:
                            670 ;;    Value - An inmediate 8-bits value that will be loaded into iyh
                            671 ;; 
                            672 .mdelete  ld__iyh
                            673 .macro ld__iyh    Value 
                            674    .db #0xFD, #0x26, Value  ;; Opcode for ld iyh, Value
                            675 .endm
                            676 
                            677 ;; Macro: ld__iyh_a
                            678 ;;    Opcode for "LD iyh, a" instruction
                            679 ;; 
                            680 .mdelete ld__iyh_a
                            681 .macro ld__iyh_a
                            682    .dw #0x67FD  ;; Opcode for ld iyh, a
                            683 .endm
                            684 
                            685 ;; Macro: ld__iyh_b
                            686 ;;    Opcode for "LD iyh, B" instruction
                            687 ;; 
                            688 .mdelete ld__iyh_b
                            689 .macro ld__iyh_b
                            690    .dw #0x60FD  ;; Opcode for ld iyh, b
                            691 .endm
                            692 
                            693 ;; Macro: ld__iyh_c
                            694 ;;    Opcode for "LD iyh, C" instruction
                            695 ;; 
                            696 .mdelete ld__iyh_c
                            697 .macro ld__iyh_c
                            698    .dw #0x61FD  ;; Opcode for ld iyh, c
                            699 .endm
                            700 
                            701 ;; Macro: ld__iyh_d
                            702 ;;    Opcode for "LD iyh, D" instruction
                            703 ;; 
                            704 .mdelete ld__iyh_d
                            705 .macro ld__iyh_d
                            706    .dw #0x62FD  ;; Opcode for ld iyh, d
                            707 .endm
                            708 
                            709 ;; Macro: ld__iyh_e
                            710 ;;    Opcode for "LD iyh, E" instruction
                            711 ;; 
                            712 .mdelete ld__iyh_e
                            713 .macro ld__iyh_e
                            714    .dw #0x63FD  ;; Opcode for ld iyh, e
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 16.
Hexadecimal [16-Bits]



                            715 .endm
                            716 
                            717 ;; Macro: ld__iyh_iyl
                            718 ;;    Opcode for "LD iyh, IyL" instruction
                            719 ;; 
                            720 .mdelete  ld__iyh_iyl
                            721 .macro ld__iyh_iyl
                            722    .dw #0x65FD  ;; Opcode for ld iyh, iyl
                            723 .endm
                            724 
                            725 ;; Macro: ld__a_iyh
                            726 ;;    Opcode for "LD A, iyh" instruction
                            727 ;; 
                            728 .mdelete ld__a_iyh
                            729 .macro ld__a_iyh
                            730    .dw #0x7CFD  ;; Opcode for ld a, iyh
                            731 .endm
                            732 
                            733 ;; Macro: ld__b_iyh
                            734 ;;    Opcode for "LD B, iyh" instruction
                            735 ;; 
                            736 .mdelete ld__b_iyh
                            737 .macro ld__b_iyh
                            738    .dw #0x44FD  ;; Opcode for ld b, iyh
                            739 .endm
                            740 
                            741 ;; Macro: ld__c_iyh
                            742 ;;    Opcode for "LD c, iyh" instruction
                            743 ;; 
                            744 .mdelete ld__c_iyh
                            745 .macro ld__c_iyh
                            746    .dw #0x4CFD  ;; Opcode for ld c, iyh
                            747 .endm
                            748 
                            749 ;; Macro: ld__d_iyh
                            750 ;;    Opcode for "LD D, iyh" instruction
                            751 ;; 
                            752 .mdelete ld__d_iyh
                            753 .macro ld__d_iyh
                            754    .dw #0x54FD  ;; Opcode for ld d, iyh
                            755 .endm
                            756 
                            757 ;; Macro: ld__e_iyh
                            758 ;;    Opcode for "LD e, iyh" instruction
                            759 ;; 
                            760 .mdelete ld__e_iyh
                            761 .macro ld__e_iyh
                            762    .dw #0x5CFD  ;; Opcode for ld e, iyh
                            763 .endm
                            764 
                            765 ;; Macro: add__iyh
                            766 ;;    Opcode for "Add iyh" instruction
                            767 ;; 
                            768 .mdelete add__iyh
                            769 .macro add__iyh
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 17.
Hexadecimal [16-Bits]



                            770    .dw #0x84FD  ;; Opcode for add iyh
                            771 .endm
                            772 
                            773 ;; Macro: sub__iyh
                            774 ;;    Opcode for "SUB iyh" instruction
                            775 ;; 
                            776 .mdelete sub__iyh
                            777 .macro sub__iyh
                            778    .dw #0x94FD  ;; Opcode for sub iyh
                            779 .endm
                            780 
                            781 ;; Macro: adc__iyh
                            782 ;;    Opcode for "ADC iyh" instruction
                            783 ;; 
                            784 .mdelete adc__iyh
                            785 .macro adc__iyh
                            786    .dw #0x8CFD  ;; Opcode for adc iyh
                            787 .endm
                            788 
                            789 ;; Macro: sbc__iyh
                            790 ;;    Opcode for "SBC iyh" instruction
                            791 ;; 
                            792 .mdelete sbc__iyh
                            793 .macro sbc__iyh
                            794    .dw #0x9CFD  ;; Opcode for sbc iyh
                            795 .endm
                            796 
                            797 ;; Macro: and__iyh
                            798 ;;    Opcode for "AND iyh" instruction
                            799 ;; 
                            800 .mdelete and__iyh
                            801 .macro and__iyh
                            802    .dw #0xA4FD  ;; Opcode for and iyh
                            803 .endm
                            804 
                            805 ;; Macro: or__iyh
                            806 ;;    Opcode for "OR iyh" instruction
                            807 ;; 
                            808 .mdelete or__iyh
                            809 .macro or__iyh
                            810    .dw #0xB4FD  ;; Opcode for or iyh
                            811 .endm
                            812 
                            813 ;; Macro: xor__iyh
                            814 ;;    Opcode for "XOR iyh" instruction
                            815 ;; 
                            816 .mdelete xor__iyh
                            817 .macro xor__iyh
                            818    .dw #0xACFD  ;; Opcode for xor iyh
                            819 .endm
                            820 
                            821 ;; Macro: cp__iyh
                            822 ;;    Opcode for "CP iyh" instruction
                            823 ;; 
                            824 .mdelete cp__iyh
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 18.
Hexadecimal [16-Bits]



                            825 .macro cp__iyh
                            826    .dw #0xBCFD  ;; Opcode for cp iyh
                            827 .endm
                            828 
                            829 ;; Macro: dec__iyh
                            830 ;;    Opcode for "DEC iyh" instruction
                            831 ;; 
                            832 .mdelete dec__iyh
                            833 .macro dec__iyh
                            834    .dw #0x25FD  ;; Opcode for dec iyh
                            835 .endm
                            836 
                            837 ;; Macro: inc__iyh
                            838 ;;    Opcode for "INC iyh" instruction
                            839 ;; 
                            840 .mdelete inc__iyh
                            841 .macro inc__iyh
                            842    .dw #0x24FD  ;; Opcode for inc iyh
                            843 .endm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 19.
Hexadecimal [16-Bits]



                             73 
                             74 ;; Symbols with the names of the CPCtelera functions we want to use
                             75 ;; must be declared globl to be recognized by the compiler. Later on,
                             76 ;; linker will do its job and make the calls go to function code.
                             77 .globl cpct_disableFirmware_asm
                             78 .globl cpct_setVideoMode_asm
                             79 .globl cpct_setPalette_asm
                             80 .globl cpct_setPALColour_asm
                             81 .globl cpct_drawSprite_asm
                             82 .globl cpct_drawSpriteMasked_asm
                             83 .globl cpct_hflipSpriteMaskedM1_asm
                             84 .globl cpct_setVideoMemoryPage_asm
                             85 
                             86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             87 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             88 ;; FUNC: initialize
                             89 ;;    Sets CPC to its initial status
                             90 ;; DESTROYS:
                             91 ;;    AF, BC, DE, HL
                             92 ;;
   0000                      93 initialize::
                             94    ;; Disable Firmware
   0000 CD 00 00      [17]   95    call  cpct_disableFirmware_asm   ;; Disable firmware
                             96 
                             97    ;; Set Mode 1
   0003 0E 01         [ 7]   98    ld    c, #1                      ;; C = 1 (New video mode)
   0005 CD 00 00      [17]   99    call  cpct_setVideoMode_asm      ;; Set Mode 1
                            100    
                            101    ;; Set Palette
   0008 21 00 00      [10]  102    ld    hl, #_g_palette            ;; HL = pointer to the start of the palette array
   000B 11 04 00      [10]  103    ld    de, #palete_size           ;; DE = Size of the palette array (num of colours)
   000E CD 00 00      [17]  104    call  cpct_setPalette_asm        ;; Set the new palette
                            105 
                            106    ;; Change border colour
   0011 21 10 00      [10]  107    ld    hl, #border_colour         ;; L=Border colour value, H=Palette Colour to be set (Border=16)
   0014 CD 00 00      [17]  108    call  cpct_setPALColour_asm      ;; Set the border (colour 16)
                            109 
   0017 C9            [10]  110    ret                              ;; return
                            111 
                            112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            113 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            114 ;; FUNC: drawBackgroundTiles
                            115 ;;    Draws as many background tiles as the number in IXL, picking their offsets
                            116 ;; from the offset vector provided in HL, and the pointers to the tiles from 
                            117 ;; the tile vector provided in BC. All tiles will be drawn one by one, in order.
                            118 ;; 
                            119 ;; INPUT:
                            120 ;;    HL: Pointer to the offsets vector (to place tiles in video memory)
                            121 ;;    DE: Pointer to the place in video memory where background is to be drawn
                            122 ;;    BC: Pointer to the tiles that will be drawn
                            123 ;;    IXL:Number of tiles to draw
                            124 ;;    
                            125 ;; DESTROYS:
                            126 ;;    AF, BC, HL, IXL
                            127 ;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 20.
Hexadecimal [16-Bits]



   0018                     128 drawBackgroundTiles::
                            129 
   0018                     130 next_tile:
   0018 D5            [11]  131    push  de       ;; Save DE (Pointer to the origin of the background (0,0) coordinates)
                            132 
                            133    ;; Make DE Point to the place where the next tile is to be drawn, that is
                            134    ;;   DE += (HL), as DE points to the origin (0,0) of the background and HL points
                            135    ;; to the Offset to be added to point to the place where the tile should be drawn
   0019 7B            [ 4]  136    ld     a, e    ;; | E += (HL) as HL points to the Least Significant Byte of
   001A 86            [ 7]  137    add  (hl)      ;; |  the offset to be added to DE (remember that Z80 is little endian)
   001B 5F            [ 4]  138    ld     e, a    ;; |
                            139    
   001C 23            [ 6]  140    inc   hl       ;; HL++, HL points now to the Most Significant Byte of the offset value
                            141 
   001D 7A            [ 4]  142    ld     a, d    ;; | D += (HL) + Carry, as HL points to the MSB of the offset and
   001E 8E            [ 7]  143    adc  (hl)      ;; |   Carry contains the carry of the last E += (HL) operation.
   001F 57            [ 4]  144    ld     d, a    ;; |
                            145 
                            146    ;; Make HL point to the offset for the next tile to be drawn, then save it
   0020 23            [ 6]  147    inc   hl       ;; HL++, so HL points to the LSB of the offset for the next tile to be drawn
   0021 E5            [11]  148    push  hl       ;; Save HL in the stack to recover it for next loop iteration
                            149 
                            150    ;; Now that DE points to the place in video memory where the tile should be drawn,
                            151    ;; make HL point to the sprite (the tile) that should be drawn there. Get that 
                            152    ;; pointer from (BC), that points to the next element in the _g_tileset array, that is,
                            153    ;; the next sprite (tile) to be drawn
   0022 0A            [ 7]  154    ld     a, (bc) ;; A = LSB from the pointer to the next tile to be drawn
   0023 6F            [ 4]  155    ld     l, a    ;; L = A = LSB
   0024 03            [ 6]  156    inc   bc       ;; BC++, so that BC points to the MSB of the next tile to be drawn
   0025 0A            [ 7]  157    ld     a, (bc) ;; A = MSB from the pointer to the next tile to be drawn
   0026 67            [ 4]  158    ld     h, a    ;; H = A = MSB (Now HL Points to the next tile to be drawn)
                            159 
                            160    ;; Make BC point to the pointer to the next sprite (tile) to be drawn and save it
   0027 03            [ 6]  161    inc   bc       ;; BC++, so that it points to the LSB of the next sprite (tile) in the _g_tileset
   0028 C5            [11]  162    push  bc       ;; Save BC in the stack to recover it for next loop iteration
                            163 
                            164    ;; Draw the tile.
                            165    ;; HL already points to the sprite
                            166    ;; DE already points to the memory location where to draw it
   0029 01 14 32      [10]  167    ld    bc, #tile_HxW           ;; BC = Sprite WidthxHeight
   002C CD 00 00      [17]  168    call  cpct_drawSprite_asm     ;; Draw the sprite on the screen
                            169 
                            170    ;; Recover saved values for next iteration from the stack
   002F C1            [10]  171    pop   bc       ;; BC points to the pointer to the next sprite (tile) to be drawn
   0030 E1            [10]  172    pop   hl       ;; HL points to the offset with respect to (0,0) where next tile should be drawn
   0031 D1            [10]  173    pop   de       ;; DE points to the origin (0,0) in video memory where background is being drawn
                            174 
   0032                     175    dec__ixl         ;; IXL--, one less tile to be drawn
   0032 DD 2D                 1    .dw #0x2DDD  ;; Opcode for dec ixl
   0034 20 E2         [12]  176    jr nz, next_tile ;; If IXL!=0, there are still some tiles to be drawn, so continue
                            177 
   0036 C9            [10]  178    ret            ;; Return
                            179 
                            180 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            181 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 21.
Hexadecimal [16-Bits]



                            182 ;; FUNC: switch_screen_buffer
                            183 ;;    Switches between front buffer and backbuffer.
                            184 ;;
                            185 ;; DESTROYS:
                            186 ;;    AF, BC, HL
                            187 ;;
   0037 80                  188 screen_buffer: .db >pbackbuffer  ;; This variable holds the upper byte of the memory address of the screen backbuffer 
                            189                                  ;; It changes every time buffers are switched, so it always contains backbuffer address.
   0038                     190 switch_screen_buffer::
                            191    ;; Check which one of the buffers is actually tagged as backbuffer (0xC000 or 0x8000)
   0038 21 37 00      [10]  192    ld   hl, #screen_buffer    ;; HL points to the variable holding actual backbuffer address Most Significant Byte 
   003B 7E            [ 7]  193    ld    a, (hl)              ;; A = backbuffer address MSB (0xC0 or 0x80)
   003C FE C0         [ 7]  194    cp #0xC0                   ;; Check if it is 0xC00
   003E 28 08         [12]  195    jr    z, to_back_buffer    ;; If it is 0xC000, set it to 0x8000
                            196 
   0040                     197 to_front_buffer:
                            198    ;; Actual backbuffer is 0x8000. Switch to 0xC000
   0040 36 C0         [10]  199    ld (hl), #>pvideomem               ;; Save 0xC0 as new backbuffer address MSB
   0042 2E 20         [ 7]  200    ld    l, #0x20                     ;; | Then show new frontbuffer (0x8000) 
   0044 CD 00 00      [17]  201    call  cpct_setVideoMemoryPage_asm  ;; | ... in the screen
                            202    
   0047 C9            [10]  203    ret                        ;; And Return
                            204 
   0048                     205 to_back_buffer:
                            206    ;; Actual backbuffer is 0xC000. Switch to 0x8000
   0048 36 80         [10]  207    ld (hl), #>pbackbuffer             ;; Save 0x80 as new backbuffer address MSB
   004A 2E 30         [ 7]  208    ld    l, #0x30                     ;; | Then show new frontbuffer (0x8000) 
   004C CD 00 00      [17]  209    call  cpct_setVideoMemoryPage_asm  ;; | ... in the screen
                            210 
   004F C9            [10]  211    ret                        ;; And Return
                            212 
                            213 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            214 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            215 ;; FUNC: redrawKnight
                            216 ;;    Erases previous location of the Knight by repainting tiles 4-15 (3 down
                            217 ;; lines of the screen), then draws the knight again over clear background
                            218 ;; 
                            219 ;; INPUTS:
                            220 ;;    DE: Pointer to the start of video memory buffer where the knight will be drawn
                            221 ;; 
                            222 ;; DESTROYS:
                            223 ;;    AF, BC, DE, HL
                            224 ;;
   0050 00                  225 knight_x:      .db 00   ;; Column where the knight is actually located
   0051 00                  226 knight_dir:    .db 00   ;; Direction towards the knight is looking at (0: right, 1: left)
                            227 
   0052                     228 redrawKnight::
                     0008   229    omitted = 4*2        ;; To draw tiles 4-15 we must omit 4 of them. As each pointer takes 2 bytes, 
                            230                         ;; ... we need to advance 4*2 bytes in the array to reach tile 4.
                            231 
                            232    ;; Erase previous sprite drawing 3 down rows of tiles
   0052                     233    ld__ixl #12                           ;; IXL=12, as we want to paint 12 tiles (4-15)
   0052 DD 2E 0C              1    .db #0xDD, #0x2E, #12  ;; Opcode for ld ixl, Value
   0055 21 08 00      [10]  234    ld    hl, #bg_tile_offsets + omitted  ;; HL points to the offset of tile 4, the first one to be drawn
   0058 01 08 00      [10]  235    ld    bc, #_g_tileset + omitted       ;; BC points to the sprite of tile 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 22.
Hexadecimal [16-Bits]



   005B CD 18 00      [17]  236    call  drawBackgroundTiles             ;; Draw the 12 tiles of the 3 down rows to erase previous sprite
                            237 
                            238    ;; Calculate location of the knight at the screen
                            239    ;; (DE already points to the start of video memory buffer)
   005E 21 E0 39      [10]  240    ld    hl, #knight_offset         ;; HL holds the offset of the location (0,Knight_Y) with respect to the start of video memory
   0061 19            [11]  241    add   hl, de                     ;; HL += DE. HL know points to (0,Y) location in the video memory buffer
   0062 3A 50 00      [13]  242    ld     a, (knight_x)             ;; A = Knight_X (Column where the knight is located)
   0065 85            [ 4]  243    add    l                         ;; | HL += A  (HL += Knight_X)
   0066 6F            [ 4]  244    ld     l, a                      ;; |    To make HL point to (X,Y) location in the video memory buffer
   0067 8C            [ 4]  245    adc    h                         ;; |
   0068 95            [ 4]  246    sub    l                         ;; |
   0069 67            [ 4]  247    ld     h, a                      ;; |
   006A EB            [ 4]  248    ex    de, hl                     ;; DE Points to (X,Y) location in the video memory buffer, where Knight will be drawn
   006B 21 00 00      [10]  249    ld    hl, #_g_spr_knight         ;; HL Points to the sprite of the knight with interlaced mask
   006E 01 19 91      [10]  250    ld    bc, #knight_WxH            ;; BC Holds dimensions of the knight (HxW)
   0071 CD 00 00      [17]  251    call  cpct_drawSpriteMasked_asm  ;; Draw the sprite of the knight in the video memory buffer
                            252 
   0074 C9            [10]  253    ret         ;; Return
                            254 
                            255 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            256 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            257 ;; FUNC: moveKnight
                            258 ;;    Moves the knight till the end of the screen, makes it turn, returns back
                            259 ;; and repeats
                            260 ;; 
                            261 ;; DESTROYS:
                            262 ;;    AF, BC, HL
                            263 ;;
   0075                     264 moveKnight::
   0075 3A 51 00      [13]  265    ld     a, (knight_dir)     ;; A = Direction towards the knight is looking at (0: right, 1: left)
   0078 3D            [ 4]  266    dec    a                   ;; A-- (to check which one is the actual direction)
   0079 3A 50 00      [13]  267    ld     a, (knight_x)       ;; A = Knight_X (Present column of the knight, that must be updated)
   007C 28 09         [12]  268    jr     z, move_left        ;; If Zero, then Knight_dir was 1, so it is looking to the left (jump)
                            269                               ;; ... else it is looking to the right (continue)
   007E                     270 move_right:
   007E 3C            [ 4]  271    inc    a                        ;; A++, to move knight to the right
   007F 32 50 00      [13]  272    ld (knight_x), a                ;; Store new location of the knight
   0082 FE 37         [ 7]  273    cp #screen_Width - knight_Width ;; Check if the Knight has arrived to the right border of the screen
   0084 28 07         [12]  274    jr     z, turn_around           ;; If Zero, night has arrived to the right border, jump to turn_around section
   0086 C9            [10]  275    ret                             ;; Else, nothing more to do, so return.
                            276 
   0087                     277 move_left:
   0087 3D            [ 4]  278    dec    a                        ;; A--, to move knight to the left
   0088 32 50 00      [13]  279    ld (knight_x), a                ;; Store new location of the knight
   008B B7            [ 4]  280    or     a                        ;; Check present value of A to know if it is 0 or not
   008C C0            [11]  281    ret   nz                        ;; If A wasn't 0, left limit has not been reached by the knight, so return
                            282                                    ;; Else (A=0), knight is at left limit, so continue to turn it around
                            283 
   008D                     284 turn_around:
   008D 3A 51 00      [13]  285    ld     a, (knight_dir)          ;; A=Direction towards the knight is looking at (0: right, 1:left)
   0090 EE 01         [ 7]  286    xor   #1                        ;; Change direction by altering the Least Significant Bit (0->1, 1->0)
   0092 32 51 00      [13]  287    ld  (knight_dir), a             ;; Store new direction in knight_dir variable
   0095 01 19 91      [10]  288    ld    bc, #knight_WxH           ;; BC=Dimensions of the knight sprite
   0098 21 00 00      [10]  289    ld    hl, #_g_spr_knight        ;; HL=Pointer to the start of the knight sprite
   009B CD 00 00      [17]  290    call  cpct_hflipSpriteMaskedM1_asm ;; Horizontally flip the knight sprite, along with its mask
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 23.
Hexadecimal [16-Bits]



                            291 
   009E C9            [10]  292    ret      ;; Return
                            293 
                            294 
                            295 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            296 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            297 ;; MAIN function. This is the entry point of the application.
                            298 ;;    _main:: global symbol is required for correctly compiling and linking
                            299 ;;
   009F                     300 _main:: 
                            301    ;; First of all, move Stack Pointer (SP) out of the video memory buffers we want
                            302    ;; to use. By default, it is placed at 0xC000 and stack grows backwards. As we
                            303    ;; want to use 0x8000-0xBFFF and 0xC000-0xFFFF as video memory buffers, stack must
                            304    ;; be moved to other place. We will place it at 0x8000, knowing that it grows backwards.
   009F 31 00 80      [10]  305    ld    sp, #0x8000           ;; Move stack pointer to 0x8000, outside video memory buffers
                            306 
                            307    ;; Initialize the CPC (Stack initialization cannot be inside this function, 
                            308    ;; as return address for a call is stored in the stack and changing stack
                            309    ;; location inside the function will make us return to a random place on RET)
   00A2 CD 00 00      [17]  310    call  initialize            ;; Call to CPC initialization function
                            311 
                            312    ;; Draw first tile row in the main video memory buffer (0xC000-0xFFFF)
                            313    ;; (We don't need to draw the other 3 rows, as they will be drawn by redrawKnight function)
   00A5                     314    ld__ixl #4                  ;; IXL will act as counter for the number of tiles
   00A5 DD 2E 04              1    .db #0xDD, #0x2E, #4  ;; Opcode for ld ixl, Value
   00A8 21 00 00      [10]  315    ld    hl, #bg_tile_offsets  ;; HL points to the start of the memory offsets for tiles
   00AB 01 00 00      [10]  316    ld    bc, #_g_tileset       ;; BC points to the start of the tileset
   00AE 11 00 C0      [10]  317    ld    de, #pvideomem        ;; DE points to the start of video memory, where Background should be drawn
   00B1 CD 18 00      [17]  318    call  drawBackgroundTiles   ;; Draw the background
                            319 
                            320    ;; Draw first tile row in the secondary video memory buffer (0x8000-0xBFFF)
   00B4                     321    ld__ixl #4                  ;; IXL will act as counter for the number of tiles
   00B4 DD 2E 04              1    .db #0xDD, #0x2E, #4  ;; Opcode for ld ixl, Value
   00B7 21 00 00      [10]  322    ld    hl, #bg_tile_offsets  ;; HL points to the start of the memory offsets for tiles
   00BA 01 00 00      [10]  323    ld    bc, #_g_tileset       ;; BC points to the start of the tileset
   00BD 11 00 80      [10]  324    ld    de, #pbackbuffer      ;; DE points to the start of video memory, where Background should be drawn
   00C0 CD 18 00      [17]  325    call  drawBackgroundTiles   ;; Draw the background
                            326 
   00C3                     327 loop:
                            328    ;; Redraw the Knight, but do it in the screen back buffer. This way, we prevent flickering
                            329    ;; due to taking too much time drawing the knight. As it is drawn outside present video memory,
                            330    ;; screen will not change a single bit while this drawing takes place
   00C3 3A 37 00      [13]  331    ld    a, (screen_buffer)   ;; A=Most significant Byte of the video memory back buffer
   00C6 57            [ 4]  332    ld    d, a                 ;; | Make DE Point to video memory back buffer
   00C7 1E 00         [ 7]  333    ld    e, #0                ;; |  D = MSB, E = 0, so DE = 0xC000 or 0x8000
   00C9 CD 52 00      [17]  334    call  redrawKnight         ;; Draw the knight at its concrete offset respect to video memory backbuffer
                            335 
                            336    ;; After drawing the Knight in the back buffer, we switch both buffers rapidly
                            337    ;; And the new location of the Knight will be shown in the screen, without flickering
   00CC CD 38 00      [17]  338    call  switch_screen_buffer ;; Switch buffers after drawing the knight. 
                            339 
                            340    ;; Update Knight's location for next iteration of the look
   00CF CD 75 00      [17]  341    call  moveKnight           ;; move the knight
                            342 
   00D2 18 EF         [12]  343    jr    loop                 ;; Repeat forever
