                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _checkUserInput
                             13 	.globl _strcpy
                             14 	.globl _concatNum
                             15 	.globl _drawMessage
                             16 	.globl _updateEntities
                             17 	.globl _cpct_setPALColour
                             18 	.globl _cpct_setPalette
                             19 	.globl _cpct_fw2hw
                             20 	.globl _cpct_setVideoMode
                             21 	.globl _cpct_drawSprite
                             22 	.globl _cpct_isKeyPressed
                             23 	.globl _cpct_scanKeyboard_f
                             24 	.globl _cpct_disableFirmware
                             25 ;--------------------------------------------------------
                             26 ; special function registers
                             27 ;--------------------------------------------------------
                             28 ;--------------------------------------------------------
                             29 ; ram data
                             30 ;--------------------------------------------------------
                             31 	.area _DATA
                             32 ;--------------------------------------------------------
                             33 ; ram data
                             34 ;--------------------------------------------------------
                             35 	.area _INITIALIZED
                             36 ;--------------------------------------------------------
                             37 ; absolute external ram data
                             38 ;--------------------------------------------------------
                             39 	.area _DABS (ABS)
                             40 ;--------------------------------------------------------
                             41 ; global & static initialisations
                             42 ;--------------------------------------------------------
                             43 	.area _HOME
                             44 	.area _GSINIT
                             45 	.area _GSFINAL
                             46 	.area _GSINIT
                             47 ;--------------------------------------------------------
                             48 ; Home
                             49 ;--------------------------------------------------------
                             50 	.area _HOME
                             51 	.area _HOME
                             52 ;--------------------------------------------------------
                             53 ; code
                             54 ;--------------------------------------------------------
                             55 	.area _CODE
                             56 ;src/main.c:30: void checkUserInput (f32 *ax, f32 *ay) {
                             57 ;	---------------------------------
                             58 ; Function checkUserInput
                             59 ; ---------------------------------
   0000                      60 _checkUserInput::
   0000 DD E5         [15]   61 	push	ix
   0002 DD 21 00 00   [14]   62 	ld	ix,#0
   0006 DD 39         [15]   63 	add	ix,sp
   0008 F5            [11]   64 	push	af
   0009 F5            [11]   65 	push	af
                             66 ;src/main.c:32: cpct_scanKeyboard_f();
   000A CDr00r00      [17]   67 	call	_cpct_scanKeyboard_f
                             68 ;src/main.c:36: if      (cpct_isKeyPressed(Key_CursorRight) ) { *ax=0.5;  }
   000D 21 00 02      [10]   69 	ld	hl, #0x0200
   0010 CDr00r00      [17]   70 	call	_cpct_isKeyPressed
   0013 4D            [ 4]   71 	ld	c, l
   0014 DD 6E 04      [19]   72 	ld	l,4 (ix)
   0017 DD 66 05      [19]   73 	ld	h,5 (ix)
   001A 79            [ 4]   74 	ld	a, c
   001B B7            [ 4]   75 	or	a, a
   001C 28 0C         [12]   76 	jr	Z,00104$
   001E AF            [ 4]   77 	xor	a, a
   001F 77            [ 7]   78 	ld	(hl), a
   0020 23            [ 6]   79 	inc	hl
   0021 77            [ 7]   80 	ld	(hl), a
   0022 23            [ 6]   81 	inc	hl
   0023 36 00         [10]   82 	ld	(hl), #0x00
   0025 23            [ 6]   83 	inc	hl
   0026 36 3F         [10]   84 	ld	(hl), #0x3f
   0028 18 16         [12]   85 	jr	00105$
   002A                      86 00104$:
                             87 ;src/main.c:37: else if (cpct_isKeyPressed(Key_CursorLeft)  ) { *ax=-0.5; }
   002A E5            [11]   88 	push	hl
   002B 21 01 01      [10]   89 	ld	hl, #0x0101
   002E CDr00r00      [17]   90 	call	_cpct_isKeyPressed
   0031 7D            [ 4]   91 	ld	a, l
   0032 E1            [10]   92 	pop	hl
   0033 B7            [ 4]   93 	or	a, a
   0034 28 0A         [12]   94 	jr	Z,00105$
   0036 AF            [ 4]   95 	xor	a, a
   0037 77            [ 7]   96 	ld	(hl), a
   0038 23            [ 6]   97 	inc	hl
   0039 77            [ 7]   98 	ld	(hl), a
   003A 23            [ 6]   99 	inc	hl
   003B 36 00         [10]  100 	ld	(hl), #0x00
   003D 23            [ 6]  101 	inc	hl
   003E 36 BF         [10]  102 	ld	(hl), #0xbf
   0040                     103 00105$:
                            104 ;src/main.c:38: if      (cpct_isKeyPressed(Key_CursorUp)    ) { *ay=-0.5; }
   0040 21 00 01      [10]  105 	ld	hl, #0x0100
   0043 CDr00r00      [17]  106 	call	_cpct_isKeyPressed
   0046 4D            [ 4]  107 	ld	c, l
   0047 DD 6E 06      [19]  108 	ld	l,6 (ix)
   004A DD 66 07      [19]  109 	ld	h,7 (ix)
   004D 79            [ 4]  110 	ld	a, c
   004E B7            [ 4]  111 	or	a, a
   004F 28 0C         [12]  112 	jr	Z,00109$
   0051 AF            [ 4]  113 	xor	a, a
   0052 77            [ 7]  114 	ld	(hl), a
   0053 23            [ 6]  115 	inc	hl
   0054 77            [ 7]  116 	ld	(hl), a
   0055 23            [ 6]  117 	inc	hl
   0056 36 00         [10]  118 	ld	(hl), #0x00
   0058 23            [ 6]  119 	inc	hl
   0059 36 BF         [10]  120 	ld	(hl), #0xbf
   005B 18 16         [12]  121 	jr	00110$
   005D                     122 00109$:
                            123 ;src/main.c:39: else if (cpct_isKeyPressed(Key_CursorDown)  ) { *ay=0.5;  }
   005D E5            [11]  124 	push	hl
   005E 21 00 04      [10]  125 	ld	hl, #0x0400
   0061 CDr00r00      [17]  126 	call	_cpct_isKeyPressed
   0064 7D            [ 4]  127 	ld	a, l
   0065 E1            [10]  128 	pop	hl
   0066 B7            [ 4]  129 	or	a, a
   0067 28 0A         [12]  130 	jr	Z,00110$
   0069 AF            [ 4]  131 	xor	a, a
   006A 77            [ 7]  132 	ld	(hl), a
   006B 23            [ 6]  133 	inc	hl
   006C 77            [ 7]  134 	ld	(hl), a
   006D 23            [ 6]  135 	inc	hl
   006E 36 00         [10]  136 	ld	(hl), #0x00
   0070 23            [ 6]  137 	inc	hl
   0071 36 3F         [10]  138 	ld	(hl), #0x3f
   0073                     139 00110$:
                            140 ;src/main.c:42: if      (cpct_isKeyPressed(Key_Q)) {
   0073 21 08 08      [10]  141 	ld	hl, #0x0808
   0076 CDr00r00      [17]  142 	call	_cpct_isKeyPressed
   0079 7D            [ 4]  143 	ld	a, l
   007A B7            [ 4]  144 	or	a, a
   007B 28 31         [12]  145 	jr	Z,00115$
                            146 ;src/main.c:43: g_gravity += 0.01;
   007D 21 23 3C      [10]  147 	ld	hl, #0x3c23
   0080 E5            [11]  148 	push	hl
   0081 21 0A D7      [10]  149 	ld	hl, #0xd70a
   0084 E5            [11]  150 	push	hl
   0085 2Ar02r00      [16]  151 	ld	hl, (_g_gravity + 2)
   0088 E5            [11]  152 	push	hl
   0089 2Ar00r00      [16]  153 	ld	hl, (_g_gravity)
   008C E5            [11]  154 	push	hl
   008D CDr00r00      [17]  155 	call	___fsadd
   0090 F1            [10]  156 	pop	af
   0091 F1            [10]  157 	pop	af
   0092 F1            [10]  158 	pop	af
   0093 F1            [10]  159 	pop	af
   0094 DD 72 FF      [19]  160 	ld	-1 (ix), d
   0097 DD 73 FE      [19]  161 	ld	-2 (ix), e
   009A DD 74 FD      [19]  162 	ld	-3 (ix), h
   009D DD 75 FC      [19]  163 	ld	-4 (ix), l
   00A0 11r00r00      [10]  164 	ld	de, #_g_gravity
   00A3 21 00 00      [10]  165 	ld	hl, #0
   00A6 39            [11]  166 	add	hl, sp
   00A7 01 04 00      [10]  167 	ld	bc, #4
   00AA ED B0         [21]  168 	ldir
   00AC 18 3D         [12]  169 	jr	00116$
   00AE                     170 00115$:
                            171 ;src/main.c:44: } else  if (cpct_isKeyPressed(Key_A)) {
   00AE 21 08 20      [10]  172 	ld	hl, #0x2008
   00B1 CDr00r00      [17]  173 	call	_cpct_isKeyPressed
   00B4 7D            [ 4]  174 	ld	a, l
   00B5 B7            [ 4]  175 	or	a, a
   00B6 28 6F         [12]  176 	jr	Z,00117$
                            177 ;src/main.c:45: g_gravity -= 0.01;
   00B8 21 23 3C      [10]  178 	ld	hl, #0x3c23
   00BB E5            [11]  179 	push	hl
   00BC 21 0A D7      [10]  180 	ld	hl, #0xd70a
   00BF E5            [11]  181 	push	hl
   00C0 2Ar02r00      [16]  182 	ld	hl, (_g_gravity + 2)
   00C3 E5            [11]  183 	push	hl
   00C4 2Ar00r00      [16]  184 	ld	hl, (_g_gravity)
   00C7 E5            [11]  185 	push	hl
   00C8 CDr00r00      [17]  186 	call	___fssub
   00CB F1            [10]  187 	pop	af
   00CC F1            [10]  188 	pop	af
   00CD F1            [10]  189 	pop	af
   00CE F1            [10]  190 	pop	af
   00CF DD 72 FF      [19]  191 	ld	-1 (ix), d
   00D2 DD 73 FE      [19]  192 	ld	-2 (ix), e
   00D5 DD 74 FD      [19]  193 	ld	-3 (ix), h
   00D8 DD 75 FC      [19]  194 	ld	-4 (ix), l
   00DB 11r00r00      [10]  195 	ld	de, #_g_gravity
   00DE 21 00 00      [10]  196 	ld	hl, #0
   00E1 39            [11]  197 	add	hl, sp
   00E2 01 04 00      [10]  198 	ld	bc, #4
   00E5 ED B0         [21]  199 	ldir
   00E7 18 02         [12]  200 	jr	00116$
                            201 ;src/main.c:48: return;
   00E9 18 3C         [12]  202 	jr	00117$
   00EB                     203 00116$:
                            204 ;src/main.c:52: strcpy(g_message.str, "Gravity:");
   00EB 21r2Cr01      [10]  205 	ld	hl, #___str_0
   00EE E5            [11]  206 	push	hl
   00EF 21r02r00      [10]  207 	ld	hl, #(_g_message + 0x0002)
   00F2 E5            [11]  208 	push	hl
   00F3 CDr00r00      [17]  209 	call	_strcpy
   00F6 F1            [10]  210 	pop	af
   00F7 F1            [10]  211 	pop	af
                            212 ;src/main.c:53: concatNum(&g_message.str[8], g_gravity*100);
   00F8 2Ar02r00      [16]  213 	ld	hl, (_g_gravity + 2)
   00FB E5            [11]  214 	push	hl
   00FC 2Ar00r00      [16]  215 	ld	hl, (_g_gravity)
   00FF E5            [11]  216 	push	hl
   0100 21 C8 42      [10]  217 	ld	hl, #0x42c8
   0103 E5            [11]  218 	push	hl
   0104 21 00 00      [10]  219 	ld	hl, #0x0000
   0107 E5            [11]  220 	push	hl
   0108 CDr00r00      [17]  221 	call	___fsmul
   010B F1            [10]  222 	pop	af
   010C F1            [10]  223 	pop	af
   010D F1            [10]  224 	pop	af
   010E F1            [10]  225 	pop	af
   010F D5            [11]  226 	push	de
   0110 E5            [11]  227 	push	hl
   0111 CDr00r00      [17]  228 	call	___fs2schar
   0114 F1            [10]  229 	pop	af
   0115 F1            [10]  230 	pop	af
   0116 45            [ 4]  231 	ld	b, l
   0117 C5            [11]  232 	push	bc
   0118 33            [ 6]  233 	inc	sp
   0119 21r0Ar00      [10]  234 	ld	hl, #(_g_message + 0x000a)
   011C E5            [11]  235 	push	hl
   011D CDr00r00      [17]  236 	call	_concatNum
   0120 F1            [10]  237 	pop	af
   0121 33            [ 6]  238 	inc	sp
                            239 ;src/main.c:54: g_message.time  = 25;
   0122 21r10r00      [10]  240 	ld	hl, #(_g_message + 0x0010)
   0125 36 19         [10]  241 	ld	(hl), #0x19
   0127                     242 00117$:
   0127 DD F9         [10]  243 	ld	sp, ix
   0129 DD E1         [14]  244 	pop	ix
   012B C9            [10]  245 	ret
   012C                     246 ___str_0:
   012C 47 72 61 76 69 74   247 	.ascii "Gravity:"
        79 3A
   0134 00                  248 	.db 0x00
                            249 ;src/main.c:60: void main(void) {
                            250 ;	---------------------------------
                            251 ; Function main
                            252 ; ---------------------------------
   0135                     253 _main::
   0135 DD E5         [15]  254 	push	ix
   0137 DD 21 00 00   [14]  255 	ld	ix,#0
   013B DD 39         [15]  256 	add	ix,sp
   013D 21 D1 FF      [10]  257 	ld	hl, #-47
   0140 39            [11]  258 	add	hl, sp
   0141 F9            [ 6]  259 	ld	sp, hl
                            260 ;src/main.c:62: TEntity logo = {
   0142 21 08 00      [10]  261 	ld	hl, #0x0008
   0145 39            [11]  262 	add	hl, sp
   0146 01r00r00      [10]  263 	ld	bc, #_gc_LogoFremos+0
   0149 71            [ 7]  264 	ld	(hl), c
   014A 23            [ 6]  265 	inc	hl
   014B 70            [ 7]  266 	ld	(hl), b
   014C 21 08 00      [10]  267 	ld	hl, #0x0008
   014F 39            [11]  268 	add	hl, sp
   0150 4D            [ 4]  269 	ld	c, l
   0151 44            [ 4]  270 	ld	b, h
   0152 21 02 00      [10]  271 	ld	hl, #0x0002
   0155 09            [11]  272 	add	hl,bc
   0156 DD 75 FE      [19]  273 	ld	-2 (ix), l
   0159 DD 74 FF      [19]  274 	ld	-1 (ix), h
   015C 36 00         [10]  275 	ld	(hl), #0x00
   015E 23            [ 6]  276 	inc	hl
   015F 36 C0         [10]  277 	ld	(hl), #0xc0
   0161 21 04 00      [10]  278 	ld	hl, #0x0004
   0164 09            [11]  279 	add	hl, bc
   0165 36 00         [10]  280 	ld	(hl), #0x00
   0167 21 05 00      [10]  281 	ld	hl, #0x0005
   016A 09            [11]  282 	add	hl, bc
   016B 36 00         [10]  283 	ld	(hl), #0x00
   016D 21 06 00      [10]  284 	ld	hl, #0x0006
   0170 09            [11]  285 	add	hl,bc
   0171 DD 75 FB      [19]  286 	ld	-5 (ix), l
   0174 DD 74 FC      [19]  287 	ld	-4 (ix), h
   0177 36 37         [10]  288 	ld	(hl), #0x37
   0179 21 07 00      [10]  289 	ld	hl, #0x0007
   017C 09            [11]  290 	add	hl,bc
   017D DD 75 F9      [19]  291 	ld	-7 (ix), l
   0180 DD 74 FA      [19]  292 	ld	-6 (ix), h
   0183 36 14         [10]  293 	ld	(hl), #0x14
   0185 21 08 00      [10]  294 	ld	hl, #0x0008
   0188 09            [11]  295 	add	hl, bc
   0189 36 00         [10]  296 	ld	(hl), #0x00
   018B 23            [ 6]  297 	inc	hl
   018C 36 00         [10]  298 	ld	(hl), #0x00
   018E 23            [ 6]  299 	inc	hl
   018F 36 00         [10]  300 	ld	(hl), #0x00
   0191 23            [ 6]  301 	inc	hl
   0192 36 3F         [10]  302 	ld	(hl), #0x3f
   0194 21 0C 00      [10]  303 	ld	hl, #0x000c
   0197 09            [11]  304 	add	hl, bc
   0198 36 CD         [10]  305 	ld	(hl), #0xcd
   019A 23            [ 6]  306 	inc	hl
   019B 36 CC         [10]  307 	ld	(hl), #0xcc
   019D 23            [ 6]  308 	inc	hl
   019E 36 4C         [10]  309 	ld	(hl), #0x4c
   01A0 23            [ 6]  310 	inc	hl
   01A1 36 3E         [10]  311 	ld	(hl), #0x3e
   01A3 21 10 00      [10]  312 	ld	hl, #0x0010
   01A6 09            [11]  313 	add	hl, bc
   01A7 36 00         [10]  314 	ld	(hl), #0x00
   01A9 23            [ 6]  315 	inc	hl
   01AA 36 00         [10]  316 	ld	(hl), #0x00
   01AC 23            [ 6]  317 	inc	hl
   01AD 36 00         [10]  318 	ld	(hl), #0x00
   01AF 23            [ 6]  319 	inc	hl
   01B0 36 00         [10]  320 	ld	(hl), #0x00
   01B2 21 14 00      [10]  321 	ld	hl, #0x0014
   01B5 09            [11]  322 	add	hl, bc
   01B6 36 00         [10]  323 	ld	(hl), #0x00
   01B8 23            [ 6]  324 	inc	hl
   01B9 36 00         [10]  325 	ld	(hl), #0x00
   01BB 23            [ 6]  326 	inc	hl
   01BC 36 00         [10]  327 	ld	(hl), #0x00
   01BE 23            [ 6]  328 	inc	hl
   01BF 36 00         [10]  329 	ld	(hl), #0x00
   01C1 21 18 00      [10]  330 	ld	hl, #0x0018
   01C4 09            [11]  331 	add	hl, bc
   01C5 36 00         [10]  332 	ld	(hl), #0x00
   01C7 23            [ 6]  333 	inc	hl
   01C8 36 00         [10]  334 	ld	(hl), #0x00
   01CA 23            [ 6]  335 	inc	hl
   01CB 36 80         [10]  336 	ld	(hl), #0x80
   01CD 23            [ 6]  337 	inc	hl
   01CE 36 3F         [10]  338 	ld	(hl), #0x3f
   01D0 21 1C 00      [10]  339 	ld	hl, #0x001c
   01D3 09            [11]  340 	add	hl, bc
   01D4 36 00         [10]  341 	ld	(hl), #0x00
   01D6 23            [ 6]  342 	inc	hl
   01D7 36 00         [10]  343 	ld	(hl), #0x00
   01D9 23            [ 6]  344 	inc	hl
   01DA 36 80         [10]  345 	ld	(hl), #0x80
   01DC 23            [ 6]  346 	inc	hl
   01DD 36 3F         [10]  347 	ld	(hl), #0x3f
                            348 ;src/main.c:68: g_message.videopos = CPCT_VMEM_START;
   01DF 21 00 C0      [10]  349 	ld	hl, #0xc000
   01E2 22r00r00      [16]  350 	ld	(_g_message), hl
                            351 ;src/main.c:69: g_message.str[0]   = '\0';
   01E5 21r02r00      [10]  352 	ld	hl, #(_g_message + 0x0002)
   01E8 36 00         [10]  353 	ld	(hl), #0x00
                            354 ;src/main.c:70: g_message.time     = 0;
   01EA 21r10r00      [10]  355 	ld	hl, #(_g_message + 0x0010)
   01ED 36 00         [10]  356 	ld	(hl), #0x00
                            357 ;src/main.c:73: g_gravity = 0.02;
   01EF FD 21r00r00   [14]  358 	ld	iy, #_g_gravity
   01F3 FD 36 00 0A   [19]  359 	ld	0 (iy), #0x0a
   01F7 FD 36 01 D7   [19]  360 	ld	1 (iy), #0xd7
   01FB FD 36 02 A3   [19]  361 	ld	2 (iy), #0xa3
   01FF FD 36 03 3C   [19]  362 	ld	3 (iy), #0x3c
                            363 ;src/main.c:76: cpct_disableFirmware();
   0203 C5            [11]  364 	push	bc
   0204 CDr00r00      [17]  365 	call	_cpct_disableFirmware
   0207 21 10 00      [10]  366 	ld	hl, #0x0010
   020A E5            [11]  367 	push	hl
   020B 21r00r00      [10]  368 	ld	hl, #_gc_palette
   020E E5            [11]  369 	push	hl
   020F CDr00r00      [17]  370 	call	_cpct_fw2hw
   0212 C1            [10]  371 	pop	bc
                            372 ;src/main.c:80: cpct_setBorder(gc_palette[2]);   // Set the border
   0213 21r02r00      [10]  373 	ld	hl, #_gc_palette + 2
   0216 56            [ 7]  374 	ld	d, (hl)
   0217 C5            [11]  375 	push	bc
   0218 1E 10         [ 7]  376 	ld	e, #0x10
   021A D5            [11]  377 	push	de
   021B CDr00r00      [17]  378 	call	_cpct_setPALColour
   021E 21 10 00      [10]  379 	ld	hl, #0x0010
   0221 E5            [11]  380 	push	hl
   0222 21r00r00      [10]  381 	ld	hl, #_gc_palette
   0225 E5            [11]  382 	push	hl
   0226 CDr00r00      [17]  383 	call	_cpct_setPalette
   0229 2E 00         [ 7]  384 	ld	l, #0x00
   022B CDr00r00      [17]  385 	call	_cpct_setVideoMode
   022E C1            [10]  386 	pop	bc
                            387 ;src/main.c:87: while(1) {
   022F                     388 00102$:
                            389 ;src/main.c:88: f32 ax=0, ay=0;    // User acceleration values
   022F DD 36 D1 00   [19]  390 	ld	-47 (ix), #0x00
   0233 DD 36 D2 00   [19]  391 	ld	-46 (ix), #0x00
   0237 DD 36 D3 00   [19]  392 	ld	-45 (ix), #0x00
   023B DD 36 D4 00   [19]  393 	ld	-44 (ix), #0x00
   023F DD 36 D5 00   [19]  394 	ld	-43 (ix), #0x00
   0243 DD 36 D6 00   [19]  395 	ld	-42 (ix), #0x00
   0247 DD 36 D7 00   [19]  396 	ld	-41 (ix), #0x00
   024B DD 36 D8 00   [19]  397 	ld	-40 (ix), #0x00
                            398 ;src/main.c:90: checkUserInput(&ax, &ay);
   024F 21 04 00      [10]  399 	ld	hl, #0x0004
   0252 39            [11]  400 	add	hl, sp
   0253 EB            [ 4]  401 	ex	de,hl
   0254 21 00 00      [10]  402 	ld	hl, #0x0000
   0257 39            [11]  403 	add	hl, sp
   0258 C5            [11]  404 	push	bc
   0259 D5            [11]  405 	push	de
   025A E5            [11]  406 	push	hl
   025B CDr00r00      [17]  407 	call	_checkUserInput
   025E F1            [10]  408 	pop	af
   025F F1            [10]  409 	pop	af
   0260 C1            [10]  410 	pop	bc
                            411 ;src/main.c:91: updateEntities(&logo, ax, ay);
   0261 59            [ 4]  412 	ld	e, c
   0262 50            [ 4]  413 	ld	d, b
   0263 C5            [11]  414 	push	bc
   0264 DD 6E D7      [19]  415 	ld	l,-41 (ix)
   0267 DD 66 D8      [19]  416 	ld	h,-40 (ix)
   026A E5            [11]  417 	push	hl
   026B DD 6E D5      [19]  418 	ld	l,-43 (ix)
   026E DD 66 D6      [19]  419 	ld	h,-42 (ix)
   0271 E5            [11]  420 	push	hl
   0272 DD 6E D3      [19]  421 	ld	l,-45 (ix)
   0275 DD 66 D4      [19]  422 	ld	h,-44 (ix)
   0278 E5            [11]  423 	push	hl
   0279 DD 6E D1      [19]  424 	ld	l,-47 (ix)
   027C DD 66 D2      [19]  425 	ld	h,-46 (ix)
   027F E5            [11]  426 	push	hl
   0280 D5            [11]  427 	push	de
   0281 CDr00r00      [17]  428 	call	_updateEntities
   0284 21 0A 00      [10]  429 	ld	hl, #10
   0287 39            [11]  430 	add	hl, sp
   0288 F9            [ 6]  431 	ld	sp, hl
   0289 CDr00r00      [17]  432 	call	_drawMessage
   028C C1            [10]  433 	pop	bc
                            434 ;src/main.c:93: cpct_drawSprite(logo.sprite, logo.videopos, logo.width, logo.height);
   028D DD 6E F9      [19]  435 	ld	l,-7 (ix)
   0290 DD 66 FA      [19]  436 	ld	h,-6 (ix)
   0293 7E            [ 7]  437 	ld	a, (hl)
   0294 DD 6E FB      [19]  438 	ld	l,-5 (ix)
   0297 DD 66 FC      [19]  439 	ld	h,-4 (ix)
   029A F5            [11]  440 	push	af
   029B 7E            [ 7]  441 	ld	a, (hl)
   029C DD 77 FD      [19]  442 	ld	-3 (ix), a
   029F F1            [10]  443 	pop	af
   02A0 DD 6E FE      [19]  444 	ld	l,-2 (ix)
   02A3 DD 66 FF      [19]  445 	ld	h,-1 (ix)
   02A6 F5            [11]  446 	push	af
   02A7 7E            [ 7]  447 	ld	a, (hl)
   02A8 23            [ 6]  448 	inc	hl
   02A9 66            [ 7]  449 	ld	h, (hl)
   02AA 6F            [ 4]  450 	ld	l, a
   02AB F1            [10]  451 	pop	af
   02AC E5            [11]  452 	push	hl
   02AD FD E1         [14]  453 	pop	iy
   02AF 69            [ 4]  454 	ld	l, c
   02B0 60            [ 4]  455 	ld	h, b
   02B1 5E            [ 7]  456 	ld	e, (hl)
   02B2 23            [ 6]  457 	inc	hl
   02B3 56            [ 7]  458 	ld	d, (hl)
   02B4 C5            [11]  459 	push	bc
   02B5 F5            [11]  460 	push	af
   02B6 33            [ 6]  461 	inc	sp
   02B7 DD 7E FD      [19]  462 	ld	a, -3 (ix)
   02BA F5            [11]  463 	push	af
   02BB 33            [ 6]  464 	inc	sp
   02BC FD E5         [15]  465 	push	iy
   02BE D5            [11]  466 	push	de
   02BF CDr00r00      [17]  467 	call	_cpct_drawSprite
   02C2 C1            [10]  468 	pop	bc
   02C3 C3r2Fr02      [10]  469 	jp	00102$
                            470 	.area _CODE
                            471 	.area _INITIALIZER
                            472 	.area _CABS (ABS)
