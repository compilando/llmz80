                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _cpct_getScreenPtr
                             13 	.globl _cpct_setPalette
                             14 	.globl _cpct_setVideoMode
                             15 	.globl _cpct_drawSprite
                             16 	.globl _cpct_isKeyPressed
                             17 	.globl _cpct_scanKeyboard_f
                             18 	.globl _cpct_disableFirmware
                             19 ;--------------------------------------------------------
                             20 ; special function registers
                             21 ;--------------------------------------------------------
                             22 ;--------------------------------------------------------
                             23 ; ram data
                             24 ;--------------------------------------------------------
                             25 	.area _DATA
                             26 ;--------------------------------------------------------
                             27 ; ram data
                             28 ;--------------------------------------------------------
                             29 	.area _INITIALIZED
                             30 ;--------------------------------------------------------
                             31 ; absolute external ram data
                             32 ;--------------------------------------------------------
                             33 	.area _DABS (ABS)
                             34 ;--------------------------------------------------------
                             35 ; global & static initialisations
                             36 ;--------------------------------------------------------
                             37 	.area _HOME
                             38 	.area _GSINIT
                             39 	.area _GSFINAL
                             40 	.area _GSINIT
                             41 ;--------------------------------------------------------
                             42 ; Home
                             43 ;--------------------------------------------------------
                             44 	.area _HOME
                             45 	.area _HOME
                             46 ;--------------------------------------------------------
                             47 ; code
                             48 ;--------------------------------------------------------
                             49 	.area _CODE
                             50 ;src/main.c:34: void main(void) {
                             51 ;	---------------------------------
                             52 ; Function main
                             53 ; ---------------------------------
   0000                      54 _main::
                             55 ;src/main.c:35: u8  x=10, y=10;   // Sprite coordinates
   0000 01 0A 0A      [10]   56 	ld	bc,#0x0a0a
                             57 ;src/main.c:42: cpct_disableFirmware();
   0003 C5            [11]   58 	push	bc
   0004 CDr00r00      [17]   59 	call	_cpct_disableFirmware
   0007 21 04 00      [10]   60 	ld	hl, #0x0004
   000A E5            [11]   61 	push	hl
   000B 21r00r00      [10]   62 	ld	hl, #_G_palette
   000E E5            [11]   63 	push	hl
   000F CDr00r00      [17]   64 	call	_cpct_setPalette
   0012 2E 01         [ 7]   65 	ld	l, #0x01
   0014 CDr00r00      [17]   66 	call	_cpct_setVideoMode
   0017 C1            [10]   67 	pop	bc
                             68 ;src/main.c:53: while(1) {
   0018                      69 00116$:
                             70 ;src/main.c:57: cpct_scanKeyboard_f();
   0018 C5            [11]   71 	push	bc
   0019 CDr00r00      [17]   72 	call	_cpct_scanKeyboard_f
   001C 21 00 02      [10]   73 	ld	hl, #0x0200
   001F CDr00r00      [17]   74 	call	_cpct_isKeyPressed
   0022 C1            [10]   75 	pop	bc
   0023 7D            [ 4]   76 	ld	a, l
   0024 B7            [ 4]   77 	or	a, a
   0025 28 08         [12]   78 	jr	Z,00105$
   0027 79            [ 4]   79 	ld	a, c
   0028 D6 44         [ 7]   80 	sub	a, #0x44
   002A 30 03         [12]   81 	jr	NC,00105$
   002C 0C            [ 4]   82 	inc	c
   002D 18 11         [12]   83 	jr	00106$
   002F                      84 00105$:
                             85 ;src/main.c:62: else if (cpct_isKeyPressed(Key_CursorLeft)  && x > 0              ) --x; 
   002F C5            [11]   86 	push	bc
   0030 21 01 01      [10]   87 	ld	hl, #0x0101
   0033 CDr00r00      [17]   88 	call	_cpct_isKeyPressed
   0036 C1            [10]   89 	pop	bc
   0037 7D            [ 4]   90 	ld	a, l
   0038 B7            [ 4]   91 	or	a, a
   0039 28 05         [12]   92 	jr	Z,00106$
   003B 79            [ 4]   93 	ld	a, c
   003C B7            [ 4]   94 	or	a, a
   003D 28 01         [12]   95 	jr	Z,00106$
   003F 0D            [ 4]   96 	dec	c
   0040                      97 00106$:
                             98 ;src/main.c:63: if      (cpct_isKeyPressed(Key_CursorUp)    && y > 0              ) --y;
   0040 C5            [11]   99 	push	bc
   0041 21 00 01      [10]  100 	ld	hl, #0x0100
   0044 CDr00r00      [17]  101 	call	_cpct_isKeyPressed
   0047 C1            [10]  102 	pop	bc
   0048 7D            [ 4]  103 	ld	a, l
   0049 B7            [ 4]  104 	or	a, a
   004A 28 07         [12]  105 	jr	Z,00112$
   004C 78            [ 4]  106 	ld	a, b
   004D B7            [ 4]  107 	or	a, a
   004E 28 03         [12]  108 	jr	Z,00112$
   0050 05            [ 4]  109 	dec	b
   0051 18 12         [12]  110 	jr	00113$
   0053                     111 00112$:
                            112 ;src/main.c:64: else if (cpct_isKeyPressed(Key_CursorDown)  && y < (SCR_H - SP_H) ) ++y;
   0053 C5            [11]  113 	push	bc
   0054 21 00 04      [10]  114 	ld	hl, #0x0400
   0057 CDr00r00      [17]  115 	call	_cpct_isKeyPressed
   005A C1            [10]  116 	pop	bc
   005B 7D            [ 4]  117 	ld	a, l
   005C B7            [ 4]  118 	or	a, a
   005D 28 06         [12]  119 	jr	Z,00113$
   005F 78            [ 4]  120 	ld	a, b
   0060 D6 8A         [ 7]  121 	sub	a, #0x8a
   0062 30 01         [12]  122 	jr	NC,00113$
   0064 04            [ 4]  123 	inc	b
   0065                     124 00113$:
                            125 ;src/main.c:67: pvideomem = cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0065 C5            [11]  126 	push	bc
   0066 C5            [11]  127 	push	bc
   0067 21 00 C0      [10]  128 	ld	hl, #0xc000
   006A E5            [11]  129 	push	hl
   006B CDr00r00      [17]  130 	call	_cpct_getScreenPtr
   006E EB            [ 4]  131 	ex	de,hl
   006F 21 0C 3E      [10]  132 	ld	hl, #0x3e0c
   0072 E5            [11]  133 	push	hl
   0073 D5            [11]  134 	push	de
   0074 21r00r00      [10]  135 	ld	hl, #_G_ctlogo
   0077 E5            [11]  136 	push	hl
   0078 CDr00r00      [17]  137 	call	_cpct_drawSprite
   007B C1            [10]  138 	pop	bc
   007C 18 9A         [12]  139 	jr	00116$
                            140 	.area _CODE
                            141 	.area _INITIALIZER
                            142 	.area _CABS (ABS)
