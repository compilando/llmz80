                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module game
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _showGameEnd
                             12 	.globl _game
                             13 	.globl _wait4Key
                             14 	.globl _updateUser
                             15 	.globl _initializeGameScreen
                             16 	.globl _getRandomUniform
                             17 	.globl _drawFrame
                             18 	.globl _getCharacter
                             19 	.globl _drawAll
                             20 	.globl _getScore
                             21 	.globl _scrollWorld
                             22 	.globl _updateCharacter
                             23 	.globl _performAction
                             24 	.globl _initializeEntities
                             25 	.globl _cpct_getScreenPtr
                             26 	.globl _cpct_waitVSYNC
                             27 	.globl _cpct_drawStringM0
                             28 	.globl _cpct_setDrawCharM0
                             29 	.globl _cpct_drawSprite
                             30 	.globl _cpct_drawSolidBox
                             31 	.globl _cpct_px2byteM0
                             32 	.globl _cpct_isKeyPressed
                             33 	.globl _cpct_scanKeyboard_f
                             34 	.globl _cpct_memset
                             35 	.globl _sprintf
                             36 ;--------------------------------------------------------
                             37 ; special function registers
                             38 ;--------------------------------------------------------
                             39 ;--------------------------------------------------------
                             40 ; ram data
                             41 ;--------------------------------------------------------
                             42 	.area _DATA
                             43 ;--------------------------------------------------------
                             44 ; ram data
                             45 ;--------------------------------------------------------
                             46 	.area _INITIALIZED
                             47 ;--------------------------------------------------------
                             48 ; absolute external ram data
                             49 ;--------------------------------------------------------
                             50 	.area _DABS (ABS)
                             51 ;--------------------------------------------------------
                             52 ; global & static initialisations
                             53 ;--------------------------------------------------------
                             54 	.area _HOME
                             55 	.area _GSINIT
                             56 	.area _GSFINAL
                             57 	.area _GSINIT
                             58 ;--------------------------------------------------------
                             59 ; Home
                             60 ;--------------------------------------------------------
                             61 	.area _HOME
                             62 	.area _HOME
                             63 ;--------------------------------------------------------
                             64 ; code
                             65 ;--------------------------------------------------------
                             66 	.area _CODE
                             67 ;src/game.c:30: void initializeGameScreen(u16 hiscore) {
                             68 ;	---------------------------------
                             69 ; Function initializeGameScreen
                             70 ; ---------------------------------
   0000                      71 _initializeGameScreen::
   0000 DD E5         [15]   72 	push	ix
   0002 DD 21 00 00   [14]   73 	ld	ix,#0
   0006 DD 39         [15]   74 	add	ix,sp
   0008 21 FA FF      [10]   75 	ld	hl, #-6
   000B 39            [11]   76 	add	hl, sp
   000C F9            [ 6]   77 	ld	sp, hl
                             78 ;src/game.c:36: cpct_clearScreen(0);
   000D 21 00 40      [10]   79 	ld	hl, #0x4000
   0010 E5            [11]   80 	push	hl
   0011 AF            [ 4]   81 	xor	a, a
   0012 F5            [11]   82 	push	af
   0013 33            [ 6]   83 	inc	sp
   0014 26 C0         [ 7]   84 	ld	h, #0xc0
   0016 E5            [11]   85 	push	hl
   0017 CDr00r00      [17]   86 	call	_cpct_memset
                             87 ;src/game.c:41: c = cpct_px2byteM0(8,8);  // Colour pattern 8-8 (black-black)
   001A 21 08 08      [10]   88 	ld	hl, #0x0808
   001D E5            [11]   89 	push	hl
   001E CDr00r00      [17]   90 	call	_cpct_px2byteM0
   0021 4D            [ 4]   91 	ld	c, l
                             92 ;src/game.c:44: pscr = cpct_getScreenPtr(CPCT_VMEM_START, 54,   0);  
   0022 C5            [11]   93 	push	bc
   0023 21 36 00      [10]   94 	ld	hl, #0x0036
   0026 E5            [11]   95 	push	hl
   0027 21 00 C0      [10]   96 	ld	hl, #0xc000
   002A E5            [11]   97 	push	hl
   002B CDr00r00      [17]   98 	call	_cpct_getScreenPtr
   002E C1            [10]   99 	pop	bc
                            100 ;src/game.c:45: cpct_drawSolidBox(pscr, c, 26, 200);
   002F 06 00         [ 7]  101 	ld	b, #0x00
   0031 11 1A C8      [10]  102 	ld	de, #0xc81a
   0034 D5            [11]  103 	push	de
   0035 C5            [11]  104 	push	bc
   0036 E5            [11]  105 	push	hl
   0037 CDr00r00      [17]  106 	call	_cpct_drawSolidBox
                            107 ;src/game.c:48: pscr = cpct_getScreenPtr(CPCT_VMEM_START, 60,  16);   
   003A 21 3C 10      [10]  108 	ld	hl, #0x103c
   003D E5            [11]  109 	push	hl
   003E 21 00 C0      [10]  110 	ld	hl, #0xc000
   0041 E5            [11]  111 	push	hl
   0042 CDr00r00      [17]  112 	call	_cpct_getScreenPtr
                            113 ;src/game.c:49: cpct_setDrawCharM0(3, 8);
   0045 E5            [11]  114 	push	hl
   0046 01 03 08      [10]  115 	ld	bc, #0x0803
   0049 C5            [11]  116 	push	bc
   004A CDr00r00      [17]  117 	call	_cpct_setDrawCharM0
   004D E1            [10]  118 	pop	hl
                            119 ;src/game.c:50: cpct_drawStringM0("HI", pscr);
   004E 01rB5r00      [10]  120 	ld	bc, #___str_0+0
   0051 E5            [11]  121 	push	hl
   0052 C5            [11]  122 	push	bc
   0053 CDr00r00      [17]  123 	call	_cpct_drawStringM0
                            124 ;src/game.c:53: pscr = cpct_getScreenPtr(CPCT_VMEM_START, 60,  24);
   0056 21 3C 18      [10]  125 	ld	hl, #0x183c
   0059 E5            [11]  126 	push	hl
   005A 21 00 C0      [10]  127 	ld	hl, #0xc000
   005D E5            [11]  128 	push	hl
   005E CDr00r00      [17]  129 	call	_cpct_getScreenPtr
   0061 4D            [ 4]  130 	ld	c, l
   0062 44            [ 4]  131 	ld	b, h
                            132 ;src/game.c:54: sprintf(str, "%5u", hiscore);
   0063 21 00 00      [10]  133 	ld	hl, #0x0000
   0066 39            [11]  134 	add	hl, sp
   0067 E5            [11]  135 	push	hl
   0068 FD E1         [14]  136 	pop	iy
   006A E5            [11]  137 	push	hl
   006B C5            [11]  138 	push	bc
   006C DD 5E 04      [19]  139 	ld	e,4 (ix)
   006F DD 56 05      [19]  140 	ld	d,5 (ix)
   0072 D5            [11]  141 	push	de
   0073 11rB8r00      [10]  142 	ld	de, #___str_1
   0076 D5            [11]  143 	push	de
   0077 FD E5         [15]  144 	push	iy
   0079 CDr00r00      [17]  145 	call	_sprintf
   007C 21 06 00      [10]  146 	ld	hl, #6
   007F 39            [11]  147 	add	hl, sp
   0080 F9            [ 6]  148 	ld	sp, hl
   0081 11 0F 08      [10]  149 	ld	de, #0x080f
   0084 D5            [11]  150 	push	de
   0085 CDr00r00      [17]  151 	call	_cpct_setDrawCharM0
   0088 C1            [10]  152 	pop	bc
   0089 E1            [10]  153 	pop	hl
                            154 ;src/game.c:56: cpct_drawStringM0(str, pscr);
   008A C5            [11]  155 	push	bc
   008B E5            [11]  156 	push	hl
   008C CDr00r00      [17]  157 	call	_cpct_drawStringM0
                            158 ;src/game.c:59: pscr = cpct_getScreenPtr(CPCT_VMEM_START, 60, 172);
   008F 21 3C AC      [10]  159 	ld	hl, #0xac3c
   0092 E5            [11]  160 	push	hl
   0093 21 00 C0      [10]  161 	ld	hl, #0xc000
   0096 E5            [11]  162 	push	hl
   0097 CDr00r00      [17]  163 	call	_cpct_getScreenPtr
                            164 ;src/game.c:60: cpct_drawSprite(G_credits, pscr, 20, 27);
   009A 01r00r00      [10]  165 	ld	bc, #_G_credits+0
   009D 11 14 1B      [10]  166 	ld	de, #0x1b14
   00A0 D5            [11]  167 	push	de
   00A1 E5            [11]  168 	push	hl
   00A2 C5            [11]  169 	push	bc
   00A3 CDr00r00      [17]  170 	call	_cpct_drawSprite
                            171 ;src/game.c:63: drawFrame(CPCT_VMEM_START, 0);
   00A6 AF            [ 4]  172 	xor	a, a
   00A7 F5            [11]  173 	push	af
   00A8 33            [ 6]  174 	inc	sp
   00A9 21 00 C0      [10]  175 	ld	hl, #0xc000
   00AC E5            [11]  176 	push	hl
   00AD CDr00r00      [17]  177 	call	_drawFrame
   00B0 DD F9         [10]  178 	ld	sp,ix
   00B2 DD E1         [14]  179 	pop	ix
   00B4 C9            [10]  180 	ret
   00B5                     181 ___str_0:
   00B5 48 49               182 	.ascii "HI"
   00B7 00                  183 	.db 0x00
   00B8                     184 ___str_1:
   00B8 25 35 75            185 	.ascii "%5u"
   00BB 00                  186 	.db 0x00
                            187 ;src/game.c:69: void updateUser(TCharacter* user) {
                            188 ;	---------------------------------
                            189 ; Function updateUser
                            190 ; ---------------------------------
   00BC                     191 _updateUser::
   00BC DD E5         [15]  192 	push	ix
   00BE DD 21 00 00   [14]  193 	ld	ix,#0
   00C2 DD 39         [15]  194 	add	ix,sp
                            195 ;src/game.c:71: cpct_scanKeyboard_f();
   00C4 CDr00r00      [17]  196 	call	_cpct_scanKeyboard_f
                            197 ;src/game.c:78: if ( cpct_isKeyPressed(Key_CursorUp) && user->status != es_jump ) {
   00C7 21 00 01      [10]  198 	ld	hl, #0x0100
   00CA CDr00r00      [17]  199 	call	_cpct_isKeyPressed
   00CD DD 4E 04      [19]  200 	ld	c,4 (ix)
   00D0 DD 46 05      [19]  201 	ld	b,5 (ix)
                            202 ;src/game.c:79: performAction(user, es_jump, user->side);    // Perform the action of jumping
   00D3 79            [ 4]  203 	ld	a, c
   00D4 C6 20         [ 7]  204 	add	a, #0x20
   00D6 5F            [ 4]  205 	ld	e, a
   00D7 78            [ 4]  206 	ld	a, b
   00D8 CE 00         [ 7]  207 	adc	a, #0x00
   00DA 57            [ 4]  208 	ld	d, a
                            209 ;src/game.c:78: if ( cpct_isKeyPressed(Key_CursorUp) && user->status != es_jump ) {
   00DB 7D            [ 4]  210 	ld	a, l
   00DC B7            [ 4]  211 	or	a, a
   00DD 28 25         [12]  212 	jr	Z,00111$
   00DF C5            [11]  213 	push	bc
   00E0 FD E1         [14]  214 	pop	iy
   00E2 FD 7E 1F      [19]  215 	ld	a, 31 (iy)
   00E5 D6 02         [ 7]  216 	sub	a, #0x02
   00E7 28 1B         [12]  217 	jr	Z,00111$
                            218 ;src/game.c:79: performAction(user, es_jump, user->side);    // Perform the action of jumping
   00E9 1A            [ 7]  219 	ld	a, (de)
   00EA 57            [ 4]  220 	ld	d, a
   00EB C5            [11]  221 	push	bc
   00EC 1E 02         [ 7]  222 	ld	e, #0x02
   00EE D5            [11]  223 	push	de
   00EF C5            [11]  224 	push	bc
   00F0 CDr00r00      [17]  225 	call	_performAction
   00F3 F1            [10]  226 	pop	af
   00F4 F1            [10]  227 	pop	af
   00F5 C1            [10]  228 	pop	bc
                            229 ;src/game.c:80: getRandomUniform(user->entity.nx);           // Use X coordinate of the user when jumping to forward update the random seed
   00F6 C5            [11]  230 	push	bc
   00F7 FD E1         [14]  231 	pop	iy
   00F9 FD 46 0B      [19]  232 	ld	b, 11 (iy)
   00FC C5            [11]  233 	push	bc
   00FD 33            [ 6]  234 	inc	sp
   00FE CDr00r00      [17]  235 	call	_getRandomUniform
   0101 33            [ 6]  236 	inc	sp
   0102 18 68         [12]  237 	jr	00114$
   0104                     238 00111$:
                            239 ;src/game.c:83: } else if ( cpct_isKeyPressed(Key_CursorRight) )
   0104 C5            [11]  240 	push	bc
   0105 D5            [11]  241 	push	de
   0106 21 00 02      [10]  242 	ld	hl, #0x0200
   0109 CDr00r00      [17]  243 	call	_cpct_isKeyPressed
   010C D1            [10]  244 	pop	de
   010D C1            [10]  245 	pop	bc
   010E 7D            [ 4]  246 	ld	a, l
   010F B7            [ 4]  247 	or	a, a
   0110 28 12         [12]  248 	jr	Z,00108$
                            249 ;src/game.c:84: performAction(user, es_walk, s_right);       // Move player to the right
   0112 21 01 01      [10]  250 	ld	hl, #0x0101
   0115 E5            [11]  251 	push	hl
   0116 DD 6E 04      [19]  252 	ld	l,4 (ix)
   0119 DD 66 05      [19]  253 	ld	h,5 (ix)
   011C E5            [11]  254 	push	hl
   011D CDr00r00      [17]  255 	call	_performAction
   0120 F1            [10]  256 	pop	af
   0121 F1            [10]  257 	pop	af
   0122 18 48         [12]  258 	jr	00114$
   0124                     259 00108$:
                            260 ;src/game.c:87: else if ( cpct_isKeyPressed(Key_CursorLeft) ) 
   0124 C5            [11]  261 	push	bc
   0125 D5            [11]  262 	push	de
   0126 21 01 01      [10]  263 	ld	hl, #0x0101
   0129 CDr00r00      [17]  264 	call	_cpct_isKeyPressed
   012C D1            [10]  265 	pop	de
   012D C1            [10]  266 	pop	bc
   012E 7D            [ 4]  267 	ld	a, l
   012F B7            [ 4]  268 	or	a, a
   0130 28 12         [12]  269 	jr	Z,00105$
                            270 ;src/game.c:88: performAction(user, es_walk, s_left);        // Move player to the left
   0132 21 01 00      [10]  271 	ld	hl, #0x0001
   0135 E5            [11]  272 	push	hl
   0136 DD 6E 04      [19]  273 	ld	l,4 (ix)
   0139 DD 66 05      [19]  274 	ld	h,5 (ix)
   013C E5            [11]  275 	push	hl
   013D CDr00r00      [17]  276 	call	_performAction
   0140 F1            [10]  277 	pop	af
   0141 F1            [10]  278 	pop	af
   0142 18 28         [12]  279 	jr	00114$
   0144                     280 00105$:
                            281 ;src/game.c:91: else if ( cpct_isKeyPressed(Key_CursorDown) ) 
   0144 C5            [11]  282 	push	bc
   0145 D5            [11]  283 	push	de
   0146 21 00 04      [10]  284 	ld	hl, #0x0400
   0149 CDr00r00      [17]  285 	call	_cpct_isKeyPressed
   014C 7D            [ 4]  286 	ld	a, l
   014D D1            [10]  287 	pop	de
   014E C1            [10]  288 	pop	bc
                            289 ;src/game.c:79: performAction(user, es_jump, user->side);    // Perform the action of jumping
   014F F5            [11]  290 	push	af
   0150 1A            [ 7]  291 	ld	a, (de)
   0151 57            [ 4]  292 	ld	d, a
   0152 F1            [10]  293 	pop	af
                            294 ;src/game.c:91: else if ( cpct_isKeyPressed(Key_CursorDown) ) 
   0153 B7            [ 4]  295 	or	a, a
   0154 28 0B         [12]  296 	jr	Z,00102$
                            297 ;src/game.c:92: performAction(user, es_moveFloor, user->side); // Enable moving floor
   0156 1E 03         [ 7]  298 	ld	e, #0x03
   0158 D5            [11]  299 	push	de
   0159 C5            [11]  300 	push	bc
   015A CDr00r00      [17]  301 	call	_performAction
   015D F1            [10]  302 	pop	af
   015E F1            [10]  303 	pop	af
   015F 18 0B         [12]  304 	jr	00114$
   0161                     305 00102$:
                            306 ;src/game.c:96: performAction(user, es_static, user->side);
   0161 D5            [11]  307 	push	de
   0162 33            [ 6]  308 	inc	sp
   0163 AF            [ 4]  309 	xor	a, a
   0164 F5            [11]  310 	push	af
   0165 33            [ 6]  311 	inc	sp
   0166 C5            [11]  312 	push	bc
   0167 CDr00r00      [17]  313 	call	_performAction
   016A F1            [10]  314 	pop	af
   016B F1            [10]  315 	pop	af
   016C                     316 00114$:
   016C DD E1         [14]  317 	pop	ix
   016E C9            [10]  318 	ret
                            319 ;src/game.c:102: void wait4Key(cpct_keyID key) {
                            320 ;	---------------------------------
                            321 ; Function wait4Key
                            322 ; ---------------------------------
   016F                     323 _wait4Key::
                            324 ;src/game.c:103: do
   016F                     325 00101$:
                            326 ;src/game.c:104: cpct_scanKeyboard_f();
   016F CDr00r00      [17]  327 	call	_cpct_scanKeyboard_f
                            328 ;src/game.c:105: while( ! cpct_isKeyPressed(key) );
   0172 C1            [10]  329 	pop	bc
   0173 E1            [10]  330 	pop	hl
   0174 E5            [11]  331 	push	hl
   0175 C5            [11]  332 	push	bc
   0176 CDr00r00      [17]  333 	call	_cpct_isKeyPressed
   0179 7D            [ 4]  334 	ld	a, l
   017A B7            [ 4]  335 	or	a, a
   017B 28 F2         [12]  336 	jr	Z,00101$
                            337 ;src/game.c:106: do
   017D                     338 00104$:
                            339 ;src/game.c:107: cpct_scanKeyboard_f();
   017D CDr00r00      [17]  340 	call	_cpct_scanKeyboard_f
                            341 ;src/game.c:108: while( cpct_isKeyPressed(key) );
   0180 C1            [10]  342 	pop	bc
   0181 E1            [10]  343 	pop	hl
   0182 E5            [11]  344 	push	hl
   0183 C5            [11]  345 	push	bc
   0184 CDr00r00      [17]  346 	call	_cpct_isKeyPressed
   0187 7D            [ 4]  347 	ld	a, l
   0188 B7            [ 4]  348 	or	a, a
   0189 20 F2         [12]  349 	jr	NZ,00104$
   018B C9            [10]  350 	ret
                            351 ;src/game.c:114: u16 game(u16 hiscore) {
                            352 ;	---------------------------------
                            353 ; Function game
                            354 ; ---------------------------------
   018C                     355 _game::
   018C 3B            [ 6]  356 	dec	sp
                            357 ;src/game.c:115: u8 alive = 1;        // Main character still alive?
   018D FD 21 00 00   [14]  358 	ld	iy, #0
   0191 FD 39         [15]  359 	add	iy, sp
   0193 FD 36 00 01   [19]  360 	ld	0 (iy), #0x01
                            361 ;src/game.c:119: initializeGameScreen(hiscore);   // Set up Game Screen
   0197 21 03 00      [10]  362 	ld	hl, #3
   019A 39            [11]  363 	add	hl, sp
   019B 4E            [ 7]  364 	ld	c, (hl)
   019C 23            [ 6]  365 	inc	hl
   019D 46            [ 7]  366 	ld	b, (hl)
   019E C5            [11]  367 	push	bc
   019F CDr00r00      [17]  368 	call	_initializeGameScreen
   01A2 F1            [10]  369 	pop	af
                            370 ;src/game.c:120: initializeEntities();            // Set up initial entities
   01A3 CDr00r00      [17]  371 	call	_initializeEntities
                            372 ;src/game.c:121: c = getCharacter();              // Get the main character
   01A6 CDr00r00      [17]  373 	call	_getCharacter
                            374 ;src/game.c:126: while(alive) {
   01A9                     375 00101$:
   01A9 FD 21 00 00   [14]  376 	ld	iy, #0
   01AD FD 39         [15]  377 	add	iy, sp
   01AF FD 7E 00      [19]  378 	ld	a, 0 (iy)
   01B2 B7            [ 4]  379 	or	a, a
   01B3 28 25         [12]  380 	jr	Z,00103$
                            381 ;src/game.c:127: updateUser(c);                // Update user status (depending on keypresses)
   01B5 E5            [11]  382 	push	hl
   01B6 E5            [11]  383 	push	hl
   01B7 CDrBCr00      [17]  384 	call	_updateUser
   01BA F1            [10]  385 	pop	af
   01BB CDr00r00      [17]  386 	call	_scrollWorld
   01BE E1            [10]  387 	pop	hl
                            388 ;src/game.c:129: alive = updateCharacter(c);   // Update character status     
   01BF E5            [11]  389 	push	hl
   01C0 E5            [11]  390 	push	hl
   01C1 CDr00r00      [17]  391 	call	_updateCharacter
   01C4 F1            [10]  392 	pop	af
   01C5 4D            [ 4]  393 	ld	c, l
   01C6 E1            [10]  394 	pop	hl
   01C7 FD 21 00 00   [14]  395 	ld	iy, #0
   01CB FD 39         [15]  396 	add	iy, sp
   01CD FD 71 00      [19]  397 	ld	0 (iy), c
                            398 ;src/game.c:130: cpct_waitVSYNC();             // Wait for VSYNC and...
   01D0 E5            [11]  399 	push	hl
   01D1 CDr00r00      [17]  400 	call	_cpct_waitVSYNC
   01D4 CDr00r00      [17]  401 	call	_drawAll
   01D7 E1            [10]  402 	pop	hl
   01D8 18 CF         [12]  403 	jr	00101$
   01DA                     404 00103$:
                            405 ;src/game.c:135: return getScore();
   01DA CDr00r00      [17]  406 	call	_getScore
   01DD 33            [ 6]  407 	inc	sp
   01DE C9            [10]  408 	ret
                            409 ;src/game.c:141: void showGameEnd(u16 score) {
                            410 ;	---------------------------------
                            411 ; Function showGameEnd
                            412 ; ---------------------------------
   01DF                     413 _showGameEnd::
   01DF DD E5         [15]  414 	push	ix
   01E1 DD 21 00 00   [14]  415 	ld	ix,#0
   01E5 DD 39         [15]  416 	add	ix,sp
   01E7 21 FA FF      [10]  417 	ld	hl, #-6
   01EA 39            [11]  418 	add	hl, sp
   01EB F9            [ 6]  419 	ld	sp, hl
                            420 ;src/game.c:146: pscr = cpct_getScreenPtr(CPCT_VMEM_START,  8, 24);
   01EC 21 08 18      [10]  421 	ld	hl, #0x1808
   01EF E5            [11]  422 	push	hl
   01F0 21 00 C0      [10]  423 	ld	hl, #0xc000
   01F3 E5            [11]  424 	push	hl
   01F4 CDr00r00      [17]  425 	call	_cpct_getScreenPtr
                            426 ;src/game.c:147: cpct_setDrawCharM0(6, 0);
   01F7 E5            [11]  427 	push	hl
   01F8 01 06 00      [10]  428 	ld	bc, #0x0006
   01FB C5            [11]  429 	push	bc
   01FC CDr00r00      [17]  430 	call	_cpct_setDrawCharM0
   01FF E1            [10]  431 	pop	hl
                            432 ;src/game.c:148: cpct_drawStringM0("GAME  OVER", pscr);
   0200 01r85r02      [10]  433 	ld	bc, #___str_2+0
   0203 E5            [11]  434 	push	hl
   0204 C5            [11]  435 	push	bc
   0205 CDr00r00      [17]  436 	call	_cpct_drawStringM0
                            437 ;src/game.c:151: pscr = cpct_getScreenPtr(CPCT_VMEM_START, 16, 48);
   0208 21 10 30      [10]  438 	ld	hl, #0x3010
   020B E5            [11]  439 	push	hl
   020C 21 00 C0      [10]  440 	ld	hl, #0xc000
   020F E5            [11]  441 	push	hl
   0210 CDr00r00      [17]  442 	call	_cpct_getScreenPtr
                            443 ;src/game.c:152: cpct_setDrawCharM0(9, 0);
   0213 E5            [11]  444 	push	hl
   0214 01 09 00      [10]  445 	ld	bc, #0x0009
   0217 C5            [11]  446 	push	bc
   0218 CDr00r00      [17]  447 	call	_cpct_setDrawCharM0
   021B E1            [10]  448 	pop	hl
                            449 ;src/game.c:153: cpct_drawStringM0(  "SCORE", pscr);
   021C 01r90r02      [10]  450 	ld	bc, #___str_3+0
   021F E5            [11]  451 	push	hl
   0220 C5            [11]  452 	push	bc
   0221 CDr00r00      [17]  453 	call	_cpct_drawStringM0
                            454 ;src/game.c:156: pscr = cpct_getScreenPtr(CPCT_VMEM_START, 16, 56);
   0224 21 10 38      [10]  455 	ld	hl, #0x3810
   0227 E5            [11]  456 	push	hl
   0228 21 00 C0      [10]  457 	ld	hl, #0xc000
   022B E5            [11]  458 	push	hl
   022C CDr00r00      [17]  459 	call	_cpct_getScreenPtr
   022F 4D            [ 4]  460 	ld	c, l
   0230 44            [ 4]  461 	ld	b, h
                            462 ;src/game.c:157: sprintf(str, "%5u", score);
   0231 21 00 00      [10]  463 	ld	hl, #0x0000
   0234 39            [11]  464 	add	hl, sp
   0235 E5            [11]  465 	push	hl
   0236 FD E1         [14]  466 	pop	iy
   0238 E5            [11]  467 	push	hl
   0239 C5            [11]  468 	push	bc
   023A DD 5E 04      [19]  469 	ld	e,4 (ix)
   023D DD 56 05      [19]  470 	ld	d,5 (ix)
   0240 D5            [11]  471 	push	de
   0241 11r96r02      [10]  472 	ld	de, #___str_4
   0244 D5            [11]  473 	push	de
   0245 FD E5         [15]  474 	push	iy
   0247 CDr00r00      [17]  475 	call	_sprintf
   024A 21 06 00      [10]  476 	ld	hl, #6
   024D 39            [11]  477 	add	hl, sp
   024E F9            [ 6]  478 	ld	sp, hl
   024F 11 0E 00      [10]  479 	ld	de, #0x000e
   0252 D5            [11]  480 	push	de
   0253 CDr00r00      [17]  481 	call	_cpct_setDrawCharM0
   0256 C1            [10]  482 	pop	bc
   0257 E1            [10]  483 	pop	hl
                            484 ;src/game.c:159: cpct_drawStringM0(str, pscr);
   0258 C5            [11]  485 	push	bc
   0259 E5            [11]  486 	push	hl
   025A CDr00r00      [17]  487 	call	_cpct_drawStringM0
                            488 ;src/game.c:162: pscr = cpct_getScreenPtr(CPCT_VMEM_START, 6, 112);
   025D 21 06 70      [10]  489 	ld	hl, #0x7006
   0260 E5            [11]  490 	push	hl
   0261 21 00 C0      [10]  491 	ld	hl, #0xc000
   0264 E5            [11]  492 	push	hl
   0265 CDr00r00      [17]  493 	call	_cpct_getScreenPtr
                            494 ;src/game.c:163: cpct_setDrawCharM0(11, 0);
   0268 E5            [11]  495 	push	hl
   0269 01 0B 00      [10]  496 	ld	bc, #0x000b
   026C C5            [11]  497 	push	bc
   026D CDr00r00      [17]  498 	call	_cpct_setDrawCharM0
   0270 E1            [10]  499 	pop	hl
                            500 ;src/game.c:164: cpct_drawStringM0("PRESS SPACE", pscr);
   0271 01r9Ar02      [10]  501 	ld	bc, #___str_5+0
   0274 E5            [11]  502 	push	hl
   0275 C5            [11]  503 	push	bc
   0276 CDr00r00      [17]  504 	call	_cpct_drawStringM0
                            505 ;src/game.c:167: wait4Key(Key_Space);
   0279 21 05 80      [10]  506 	ld	hl, #0x8005
   027C E5            [11]  507 	push	hl
   027D CDr6Fr01      [17]  508 	call	_wait4Key
   0280 DD F9         [10]  509 	ld	sp,ix
   0282 DD E1         [14]  510 	pop	ix
   0284 C9            [10]  511 	ret
   0285                     512 ___str_2:
   0285 47 41 4D 45 20 20   513 	.ascii "GAME  OVER"
        4F 56 45 52
   028F 00                  514 	.db 0x00
   0290                     515 ___str_3:
   0290 53 43 4F 52 45      516 	.ascii "SCORE"
   0295 00                  517 	.db 0x00
   0296                     518 ___str_4:
   0296 25 35 75            519 	.ascii "%5u"
   0299 00                  520 	.db 0x00
   029A                     521 ___str_5:
   029A 50 52 45 53 53 20   522 	.ascii "PRESS SPACE"
        53 50 41 43 45
   02A5 00                  523 	.db 0x00
                            524 	.area _CODE
                            525 	.area _INITIALIZER
                            526 	.area _CABS (ABS)
