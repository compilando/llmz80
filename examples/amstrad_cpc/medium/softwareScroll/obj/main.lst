                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _game
                             13 	.globl _initialize
                             14 	.globl _drawFrame
                             15 	.globl _drawBuidlingScrolled
                             16 	.globl _video_switchBuffers
                             17 	.globl _video_initBuffers
                             18 	.globl _video_getBackBufferPtr
                             19 	.globl _cpct_etm_drawTilemap4x8_ag
                             20 	.globl _cpct_etm_setDrawTilemap4x8_ag
                             21 	.globl _cpct_getScreenPtr
                             22 	.globl _cpct_setPALColour
                             23 	.globl _cpct_setPalette
                             24 	.globl _cpct_setVideoMode
                             25 	.globl _cpct_isKeyPressed
                             26 	.globl _cpct_scanKeyboard_f
                             27 	.globl _cpct_setStackLocation
                             28 	.globl _cpct_disableFirmware
                             29 ;--------------------------------------------------------
                             30 ; special function registers
                             31 ;--------------------------------------------------------
                             32 ;--------------------------------------------------------
                             33 ; ram data
                             34 ;--------------------------------------------------------
                             35 	.area _DATA
                             36 ;--------------------------------------------------------
                             37 ; ram data
                             38 ;--------------------------------------------------------
                             39 	.area _INITIALIZED
                             40 ;--------------------------------------------------------
                             41 ; absolute external ram data
                             42 ;--------------------------------------------------------
                             43 	.area _DABS (ABS)
                             44 ;--------------------------------------------------------
                             45 ; global & static initialisations
                             46 ;--------------------------------------------------------
                             47 	.area _HOME
                             48 	.area _GSINIT
                             49 	.area _GSFINAL
                             50 	.area _GSINIT
                             51 ;--------------------------------------------------------
                             52 ; Home
                             53 ;--------------------------------------------------------
                             54 	.area _HOME
                             55 	.area _HOME
                             56 ;--------------------------------------------------------
                             57 ; code
                             58 ;--------------------------------------------------------
                             59 	.area _CODE
                             60 ;src/main.c:79: void drawBuidlingScrolled(u16 offset) {
                             61 ;	---------------------------------
                             62 ; Function drawBuidlingScrolled
                             63 ; ---------------------------------
   0000                      64 _drawBuidlingScrolled::
   0000 DD E5         [15]   65 	push	ix
   0002 DD 21 00 00   [14]   66 	ld	ix,#0
   0006 DD 39         [15]   67 	add	ix,sp
                             68 ;src/main.c:84: u8* vmem = video_getBackBufferPtr() + VIEWPORT_OFFSET;
   0008 CDr00r00      [17]   69 	call	_video_getBackBufferPtr
   000B 01 48 01      [10]   70 	ld	bc, #0x0148
   000E 09            [11]   71 	add	hl, bc
                             72 ;src/main.c:89: cpct_etm_drawTilemap4x8_ag(vmem, g_building + offset);
   000F 01r00r00      [10]   73 	ld	bc, #_g_building+0
   0012 DD 7E 04      [19]   74 	ld	a, 4 (ix)
   0015 81            [ 4]   75 	add	a, c
   0016 4F            [ 4]   76 	ld	c, a
   0017 DD 7E 05      [19]   77 	ld	a, 5 (ix)
   001A 88            [ 4]   78 	adc	a, b
   001B 47            [ 4]   79 	ld	b, a
   001C C5            [11]   80 	push	bc
   001D E5            [11]   81 	push	hl
   001E CDr00r00      [17]   82 	call	_cpct_etm_drawTilemap4x8_ag
                             83 ;src/main.c:92: video_switchBuffers();
   0021 CDr00r00      [17]   84 	call	_video_switchBuffers
   0024 DD E1         [14]   85 	pop	ix
   0026 C9            [10]   86 	ret
                             87 ;src/main.c:101: void drawFrame() {
                             88 ;	---------------------------------
                             89 ; Function drawFrame
                             90 ; ---------------------------------
   0027                      91 _drawFrame::
                             92 ;src/main.c:103: u8* vmem_buffer = video_getBackBufferPtr();  // Get present Hardware Back Buffer were we are going to draw
   0027 CDr00r00      [17]   93 	call	_video_getBackBufferPtr
                             94 ;src/main.c:114: cpct_etm_setDrawTilemap4x8_ag (20, 4, g_frame_ud_W, g_tileset_00);
   002A E5            [11]   95 	push	hl
   002B 21r00r00      [10]   96 	ld	hl, #_g_tileset_00
   002E E5            [11]   97 	push	hl
   002F 21 15 00      [10]   98 	ld	hl, #0x0015
   0032 E5            [11]   99 	push	hl
   0033 21 14 04      [10]  100 	ld	hl, #0x0414
   0036 E5            [11]  101 	push	hl
   0037 CDr00r00      [17]  102 	call	_cpct_etm_setDrawTilemap4x8_ag
   003A C1            [10]  103 	pop	bc
                            104 ;src/main.c:116: cpct_etm_drawTilemap4x8_ag    (vmem_buffer, g_frame_ud);
   003B 11r00r00      [10]  105 	ld	de, #_g_frame_ud
   003E C5            [11]  106 	push	bc
   003F D5            [11]  107 	push	de
   0040 C5            [11]  108 	push	bc
   0041 CDr00r00      [17]  109 	call	_cpct_etm_drawTilemap4x8_ag
   0044 C1            [10]  110 	pop	bc
                            111 ;src/main.c:123: vmem = cpct_getScreenPtr   (vmem_buffer,  0*TILE_W, 20*TILE_H);
   0045 C5            [11]  112 	push	bc
   0046 21 00 A0      [10]  113 	ld	hl, #0xa000
   0049 E5            [11]  114 	push	hl
   004A C5            [11]  115 	push	bc
   004B CDr00r00      [17]  116 	call	_cpct_getScreenPtr
   004E C1            [10]  117 	pop	bc
                            118 ;src/main.c:126: cpct_etm_drawTilemap4x8_ag (vmem, g_frame_ud + 1);
   004F 11r01r00      [10]  119 	ld	de, #_g_frame_ud + 1
   0052 C5            [11]  120 	push	bc
   0053 D5            [11]  121 	push	de
   0054 E5            [11]  122 	push	hl
   0055 CDr00r00      [17]  123 	call	_cpct_etm_drawTilemap4x8_ag
   0058 21r00r00      [10]  124 	ld	hl, #_g_tileset_00
   005B E5            [11]  125 	push	hl
   005C 21 04 00      [10]  126 	ld	hl, #0x0004
   005F E5            [11]  127 	push	hl
   0060 21 02 10      [10]  128 	ld	hl, #0x1002
   0063 E5            [11]  129 	push	hl
   0064 CDr00r00      [17]  130 	call	_cpct_etm_setDrawTilemap4x8_ag
   0067 C1            [10]  131 	pop	bc
                            132 ;src/main.c:141: vmem = cpct_getScreenPtr   (vmem_buffer,  0*TILE_W, 4*TILE_H);
   0068 C5            [11]  133 	push	bc
   0069 21 00 20      [10]  134 	ld	hl, #0x2000
   006C E5            [11]  135 	push	hl
   006D C5            [11]  136 	push	bc
   006E CDr00r00      [17]  137 	call	_cpct_getScreenPtr
   0071 EB            [ 4]  138 	ex	de,hl
   0072 C1            [10]  139 	pop	bc
                            140 ;src/main.c:142: cpct_etm_drawTilemap4x8_ag (vmem, g_frame_lr);   
   0073 21r00r00      [10]  141 	ld	hl, #_g_frame_lr
   0076 C5            [11]  142 	push	bc
   0077 E5            [11]  143 	push	hl
   0078 D5            [11]  144 	push	de
   0079 CDr00r00      [17]  145 	call	_cpct_etm_drawTilemap4x8_ag
   007C C1            [10]  146 	pop	bc
                            147 ;src/main.c:145: vmem = cpct_getScreenPtr   (vmem_buffer, 18*TILE_W, 4*TILE_H);
   007D 21 48 20      [10]  148 	ld	hl, #0x2048
   0080 E5            [11]  149 	push	hl
   0081 C5            [11]  150 	push	bc
   0082 CDr00r00      [17]  151 	call	_cpct_getScreenPtr
                            152 ;src/main.c:146: cpct_etm_drawTilemap4x8_ag (vmem, g_frame_lr + 2);
   0085 01r02r00      [10]  153 	ld	bc, #_g_frame_lr + 2
   0088 C5            [11]  154 	push	bc
   0089 E5            [11]  155 	push	hl
   008A CDr00r00      [17]  156 	call	_cpct_etm_drawTilemap4x8_ag
   008D C9            [10]  157 	ret
                            158 ;src/main.c:154: void initialize() {
                            159 ;	---------------------------------
                            160 ; Function initialize
                            161 ; ---------------------------------
   008E                     162 _initialize::
                            163 ;src/main.c:155: cpct_disableFirmware();          // We use own mode and colours, firmware must be disabled
   008E CDr00r00      [17]  164 	call	_cpct_disableFirmware
                            165 ;src/main.c:156: cpct_setVideoMode(0);            // Set video mode 0 (160x200 pixels, 20x25 characters, 16 colours)
   0091 2E 00         [ 7]  166 	ld	l, #0x00
   0093 CDr00r00      [17]  167 	call	_cpct_setVideoMode
                            168 ;src/main.c:157: cpct_setPalette(g_palette, 16);  // Set our own colours defined en g_palette (automatically generated in maps/tileset.c)
   0096 21 10 00      [10]  169 	ld	hl, #0x0010
   0099 E5            [11]  170 	push	hl
   009A 21r00r00      [10]  171 	ld	hl, #_g_palette
   009D E5            [11]  172 	push	hl
   009E CDr00r00      [17]  173 	call	_cpct_setPalette
                            174 ;src/main.c:158: cpct_setBorder(HW_BLUE);         // Set border same as background colour: BLUE
   00A1 21 10 04      [10]  175 	ld	hl, #0x0410
   00A4 E5            [11]  176 	push	hl
   00A5 CDr00r00      [17]  177 	call	_cpct_setPALColour
                            178 ;src/main.c:164: video_initBuffers();    // Initialize screen video buffers
   00A8 CDr00r00      [17]  179 	call	_video_initBuffers
                            180 ;src/main.c:165: drawFrame();            // Draw a frame at the first selected screen buffer
   00AB CDr27r00      [17]  181 	call	_drawFrame
                            182 ;src/main.c:166: video_switchBuffers();  // Switch video buffers (current screen <--> current backbuffer)
   00AE CDr00r00      [17]  183 	call	_video_switchBuffers
                            184 ;src/main.c:167: drawFrame();            // Draw the same frame at the second screen buffer
   00B1 CDr27r00      [17]  185 	call	_drawFrame
                            186 ;src/main.c:173: cpct_etm_setDrawTilemap4x8_ag(VIEWPORT_W, VIEWPORT_H, g_building_W, g_tileset_00);
   00B4 21r00r00      [10]  187 	ld	hl, #_g_tileset_00
   00B7 E5            [11]  188 	push	hl
   00B8 21 20 00      [10]  189 	ld	hl, #0x0020
   00BB E5            [11]  190 	push	hl
   00BC 21 10 10      [10]  191 	ld	hl, #0x1010
   00BF E5            [11]  192 	push	hl
   00C0 CDr00r00      [17]  193 	call	_cpct_etm_setDrawTilemap4x8_ag
   00C3 C9            [10]  194 	ret
                            195 ;src/main.c:181: void game() {
                            196 ;	---------------------------------
                            197 ; Function game
                            198 ; ---------------------------------
   00C4                     199 _game::
                            200 ;src/main.c:182: u16 offset=0;  // Offset in tiles of the start of the view window in the g_building tilemap
   00C4 01 00 00      [10]  201 	ld	bc, #0x0000
                            202 ;src/main.c:183: u8  x=0, y=0;  // (x, y) coordinates of the start of the view window in the g_building tilemap
   00C7 11 00 00      [10]  203 	ld	de,#0x0000
                            204 ;src/main.c:186: while (1) {
   00CA                     205 00114$:
                            206 ;src/main.c:189: drawBuidlingScrolled(offset);
   00CA C5            [11]  207 	push	bc
   00CB D5            [11]  208 	push	de
   00CC C5            [11]  209 	push	bc
   00CD CDr00r00      [17]  210 	call	_drawBuidlingScrolled
   00D0 F1            [10]  211 	pop	af
   00D1 CDr00r00      [17]  212 	call	_cpct_scanKeyboard_f
   00D4 21 04 04      [10]  213 	ld	hl, #0x0404
   00D7 CDr00r00      [17]  214 	call	_cpct_isKeyPressed
   00DA D1            [10]  215 	pop	de
   00DB C1            [10]  216 	pop	bc
   00DC 7D            [ 4]  217 	ld	a, l
   00DD B7            [ 4]  218 	or	a, a
   00DE 28 06         [12]  219 	jr	Z,00102$
   00E0 7B            [ 4]  220 	ld	a, e
   00E1 B7            [ 4]  221 	or	a, a
   00E2 28 02         [12]  222 	jr	Z,00102$
   00E4 1D            [ 4]  223 	dec	e
   00E5 0B            [ 6]  224 	dec	bc
   00E6                     225 00102$:
                            226 ;src/main.c:205: if (cpct_isKeyPressed(Key_P) && x < g_building_W - VIEWPORT_W) { ++x; ++offset; }
   00E6 C5            [11]  227 	push	bc
   00E7 D5            [11]  228 	push	de
   00E8 21 03 08      [10]  229 	ld	hl, #0x0803
   00EB CDr00r00      [17]  230 	call	_cpct_isKeyPressed
   00EE D1            [10]  231 	pop	de
   00EF C1            [10]  232 	pop	bc
   00F0 7D            [ 4]  233 	ld	a, l
   00F1 B7            [ 4]  234 	or	a, a
   00F2 28 07         [12]  235 	jr	Z,00105$
   00F4 7B            [ 4]  236 	ld	a, e
   00F5 D6 10         [ 7]  237 	sub	a, #0x10
   00F7 30 02         [12]  238 	jr	NC,00105$
   00F9 1C            [ 4]  239 	inc	e
   00FA 03            [ 6]  240 	inc	bc
   00FB                     241 00105$:
                            242 ;src/main.c:206: if (cpct_isKeyPressed(Key_Q) && y > 0)                         { --y; offset -= g_building_W; }
   00FB C5            [11]  243 	push	bc
   00FC D5            [11]  244 	push	de
   00FD 21 08 08      [10]  245 	ld	hl, #0x0808
   0100 CDr00r00      [17]  246 	call	_cpct_isKeyPressed
   0103 D1            [10]  247 	pop	de
   0104 C1            [10]  248 	pop	bc
   0105 7D            [ 4]  249 	ld	a, l
   0106 B7            [ 4]  250 	or	a, a
   0107 28 0D         [12]  251 	jr	Z,00108$
   0109 7A            [ 4]  252 	ld	a, d
   010A B7            [ 4]  253 	or	a, a
   010B 28 09         [12]  254 	jr	Z,00108$
   010D 15            [ 4]  255 	dec	d
   010E 79            [ 4]  256 	ld	a, c
   010F C6 E0         [ 7]  257 	add	a, #0xe0
   0111 4F            [ 4]  258 	ld	c, a
   0112 78            [ 4]  259 	ld	a, b
   0113 CE FF         [ 7]  260 	adc	a, #0xff
   0115 47            [ 4]  261 	ld	b, a
   0116                     262 00108$:
                            263 ;src/main.c:207: if (cpct_isKeyPressed(Key_A) && y < g_building_H - VIEWPORT_H) { ++y; offset += g_building_W; }
   0116 C5            [11]  264 	push	bc
   0117 D5            [11]  265 	push	de
   0118 21 08 20      [10]  266 	ld	hl, #0x2008
   011B CDr00r00      [17]  267 	call	_cpct_isKeyPressed
   011E D1            [10]  268 	pop	de
   011F C1            [10]  269 	pop	bc
   0120 7D            [ 4]  270 	ld	a, l
   0121 B7            [ 4]  271 	or	a, a
   0122 28 A6         [12]  272 	jr	Z,00114$
   0124 7A            [ 4]  273 	ld	a, d
   0125 D6 10         [ 7]  274 	sub	a, #0x10
   0127 30 A1         [12]  275 	jr	NC,00114$
   0129 14            [ 4]  276 	inc	d
   012A 21 20 00      [10]  277 	ld	hl, #0x0020
   012D 09            [11]  278 	add	hl,bc
   012E 4D            [ 4]  279 	ld	c, l
   012F 44            [ 4]  280 	ld	b, h
   0130 18 98         [12]  281 	jr	00114$
                            282 ;src/main.c:215: void main(void) {
                            283 ;	---------------------------------
                            284 ; Function main
                            285 ; ---------------------------------
   0132                     286 _main::
                            287 ;src/main.c:221: cpct_setStackLocation((void*)0x8000);
   0132 21 00 80      [10]  288 	ld	hl, #0x8000
   0135 CDr00r00      [17]  289 	call	_cpct_setStackLocation
                            290 ;src/main.c:224: initialize();
   0138 CDr8Er00      [17]  291 	call	_initialize
                            292 ;src/main.c:225: game();
   013B C3rC4r00      [10]  293 	jp  _game
                            294 	.area _CODE
                            295 	.area _INITIALIZER
                            296 	.area _CABS (ABS)
