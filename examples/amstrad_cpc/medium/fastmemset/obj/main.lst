                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _doSomeClears
                             13 	.globl _doSomeClears8
                             14 	.globl _waitNVSYNCs
                             15 	.globl _getColourPattern
                             16 	.globl _cpct_setPALColour
                             17 	.globl _cpct_waitVSYNC
                             18 	.globl _cpct_setVideoMode
                             19 	.globl _cpct_px2byteM0
                             20 	.globl _cpct_memset_f64
                             21 	.globl _cpct_memset_f8
                             22 	.globl _cpct_memset
                             23 	.globl _cpct_disableFirmware
                             24 ;--------------------------------------------------------
                             25 ; special function registers
                             26 ;--------------------------------------------------------
                             27 ;--------------------------------------------------------
                             28 ; ram data
                             29 ;--------------------------------------------------------
                             30 	.area _DATA
                             31 ;--------------------------------------------------------
                             32 ; ram data
                             33 ;--------------------------------------------------------
                             34 	.area _INITIALIZED
                             35 ;--------------------------------------------------------
                             36 ; absolute external ram data
                             37 ;--------------------------------------------------------
                             38 	.area _DABS (ABS)
                             39 ;--------------------------------------------------------
                             40 ; global & static initialisations
                             41 ;--------------------------------------------------------
                             42 	.area _HOME
                             43 	.area _GSINIT
                             44 	.area _GSFINAL
                             45 	.area _GSINIT
                             46 ;--------------------------------------------------------
                             47 ; Home
                             48 ;--------------------------------------------------------
                             49 	.area _HOME
                             50 	.area _HOME
                             51 ;--------------------------------------------------------
                             52 ; code
                             53 ;--------------------------------------------------------
                             54 	.area _CODE
                             55 ;src/main.c:27: u16 getColourPattern(u8 c1, u8 c2, u8 c3, u8 c4) {
                             56 ;	---------------------------------
                             57 ; Function getColourPattern
                             58 ; ---------------------------------
   0000                      59 _getColourPattern::
   0000 DD E5         [15]   60 	push	ix
   0002 DD 21 00 00   [14]   61 	ld	ix,#0
   0006 DD 39         [15]   62 	add	ix,sp
                             63 ;src/main.c:28: return 256*cpct_px2byteM0(c3, c4) + cpct_px2byteM0(c1, c2);
   0008 DD 66 07      [19]   64 	ld	h, 7 (ix)
   000B DD 6E 06      [19]   65 	ld	l, 6 (ix)
   000E E5            [11]   66 	push	hl
   000F CDr00r00      [17]   67 	call	_cpct_px2byteM0
   0012 45            [ 4]   68 	ld	b, l
   0013 0E 00         [ 7]   69 	ld	c, #0x00
   0015 C5            [11]   70 	push	bc
   0016 DD 66 05      [19]   71 	ld	h, 5 (ix)
   0019 DD 6E 04      [19]   72 	ld	l, 4 (ix)
   001C E5            [11]   73 	push	hl
   001D CDr00r00      [17]   74 	call	_cpct_px2byteM0
   0020 C1            [10]   75 	pop	bc
   0021 26 00         [ 7]   76 	ld	h, #0x00
   0023 09            [11]   77 	add	hl, bc
   0024 DD E1         [14]   78 	pop	ix
   0026 C9            [10]   79 	ret
                             80 ;src/main.c:34: void waitNVSYNCs(u8 n) {
                             81 ;	---------------------------------
                             82 ; Function waitNVSYNCs
                             83 ; ---------------------------------
   0027                      84 _waitNVSYNCs::
                             85 ;src/main.c:35: do {
   0027 21 02 00      [10]   86 	ld	hl, #2+0
   002A 39            [11]   87 	add	hl, sp
   002B 4E            [ 7]   88 	ld	c, (hl)
   002C                      89 00103$:
                             90 ;src/main.c:37: cpct_waitVSYNC();
   002C C5            [11]   91 	push	bc
   002D CDr00r00      [17]   92 	call	_cpct_waitVSYNC
   0030 C1            [10]   93 	pop	bc
                             94 ;src/main.c:42: if (--n) {
   0031 0D            [ 4]   95 	dec	c
   0032 79            [ 4]   96 	ld	a, c
   0033 B7            [ 4]   97 	or	a, a
   0034 28 02         [12]   98 	jr	Z,00104$
                             99 ;src/main.c:43: __asm__ ("halt"); // Halt stops the Z80 until next interrupt.
   0036 76            [ 4]  100 	halt
                            101 ;src/main.c:44: __asm__ ("halt"); // There are 6 interrupts per VSYNC (1/300 seconds each)
   0037 76            [ 4]  102 	halt
   0038                     103 00104$:
                            104 ;src/main.c:46: } while(n);
   0038 79            [ 4]  105 	ld	a, c
   0039 B7            [ 4]  106 	or	a, a
   003A 20 F0         [12]  107 	jr	NZ,00103$
   003C C9            [10]  108 	ret
                            109 ;src/main.c:53: void doSomeClears8(u8 colour, u8 vsyncs) {
                            110 ;	---------------------------------
                            111 ; Function doSomeClears8
                            112 ; ---------------------------------
   003D                     113 _doSomeClears8::
   003D 3B            [ 6]  114 	dec	sp
                            115 ;src/main.c:55: for(i=0; i < 2 ; i++) {
   003E FD 21 00 00   [14]  116 	ld	iy, #0
   0042 FD 39         [15]  117 	add	iy, sp
   0044 FD 36 00 00   [19]  118 	ld	0 (iy), #0x00
   0048                     119 00102$:
                            120 ;src/main.c:56: u8 pattern = cpct_px2byteM0(colour, colour);
   0048 FD 21 03 00   [14]  121 	ld	iy, #3
   004C FD 39         [15]  122 	add	iy, sp
   004E FD 66 00      [19]  123 	ld	h, 0 (iy)
   0051 FD 6E 00      [19]  124 	ld	l, 0 (iy)
   0054 E5            [11]  125 	push	hl
   0055 CDr00r00      [17]  126 	call	_cpct_px2byteM0
   0058 45            [ 4]  127 	ld	b, l
                            128 ;src/main.c:57: waitNVSYNCs(vsyncs);
   0059 C5            [11]  129 	push	bc
   005A 21 06 00      [10]  130 	ld	hl, #6+0
   005D 39            [11]  131 	add	hl, sp
   005E 7E            [ 7]  132 	ld	a, (hl)
   005F F5            [11]  133 	push	af
   0060 33            [ 6]  134 	inc	sp
   0061 CDr27r00      [17]  135 	call	_waitNVSYNCs
   0064 33            [ 6]  136 	inc	sp
   0065 C1            [10]  137 	pop	bc
                            138 ;src/main.c:58: cpct_memset(CPCT_VMEM_START, pattern, 0x4000);
   0066 21 00 40      [10]  139 	ld	hl, #0x4000
   0069 E5            [11]  140 	push	hl
   006A C5            [11]  141 	push	bc
   006B 33            [ 6]  142 	inc	sp
   006C 26 C0         [ 7]  143 	ld	h, #0xc0
   006E E5            [11]  144 	push	hl
   006F CDr00r00      [17]  145 	call	_cpct_memset
                            146 ;src/main.c:59: waitNVSYNCs(vsyncs);
   0072 21 04 00      [10]  147 	ld	hl, #4+0
   0075 39            [11]  148 	add	hl, sp
   0076 7E            [ 7]  149 	ld	a, (hl)
   0077 F5            [11]  150 	push	af
   0078 33            [ 6]  151 	inc	sp
   0079 CDr27r00      [17]  152 	call	_waitNVSYNCs
   007C 33            [ 6]  153 	inc	sp
                            154 ;src/main.c:60: cpct_memset(CPCT_VMEM_START,       0, 0x4000);
   007D 21 00 40      [10]  155 	ld	hl, #0x4000
   0080 E5            [11]  156 	push	hl
   0081 AF            [ 4]  157 	xor	a, a
   0082 F5            [11]  158 	push	af
   0083 33            [ 6]  159 	inc	sp
   0084 26 C0         [ 7]  160 	ld	h, #0xc0
   0086 E5            [11]  161 	push	hl
   0087 CDr00r00      [17]  162 	call	_cpct_memset
                            163 ;src/main.c:55: for(i=0; i < 2 ; i++) {
   008A FD 21 00 00   [14]  164 	ld	iy, #0
   008E FD 39         [15]  165 	add	iy, sp
   0090 FD 34 00      [23]  166 	inc	0 (iy)
   0093 FD 7E 00      [19]  167 	ld	a, 0 (iy)
   0096 D6 02         [ 7]  168 	sub	a, #0x02
   0098 38 AE         [12]  169 	jr	C,00102$
   009A 33            [ 6]  170 	inc	sp
   009B C9            [10]  171 	ret
                            172 ;src/main.c:69: void doSomeClears(TMemsetFunc func, u8 colour, u8 vsyncs) {
                            173 ;	---------------------------------
                            174 ; Function doSomeClears
                            175 ; ---------------------------------
   009C                     176 _doSomeClears::
   009C DD E5         [15]  177 	push	ix
   009E DD 21 00 00   [14]  178 	ld	ix,#0
   00A2 DD 39         [15]  179 	add	ix,sp
   00A4 3B            [ 6]  180 	dec	sp
                            181 ;src/main.c:71: for(i=0; i < 2 ; i++) {
   00A5 DD 36 FF 00   [19]  182 	ld	-1 (ix), #0x00
   00A9                     183 00102$:
                            184 ;src/main.c:72: u16 pattern = getColourPattern(colour, colour, colour, colour);
   00A9 DD 66 06      [19]  185 	ld	h, 6 (ix)
   00AC DD 6E 06      [19]  186 	ld	l, 6 (ix)
   00AF E5            [11]  187 	push	hl
   00B0 DD 66 06      [19]  188 	ld	h, 6 (ix)
   00B3 DD 6E 06      [19]  189 	ld	l, 6 (ix)
   00B6 E5            [11]  190 	push	hl
   00B7 CDr00r00      [17]  191 	call	_getColourPattern
   00BA F1            [10]  192 	pop	af
                            193 ;src/main.c:73: waitNVSYNCs(vsyncs);
   00BB E3            [19]  194 	ex	(sp),hl
   00BC DD 7E 07      [19]  195 	ld	a, 7 (ix)
   00BF F5            [11]  196 	push	af
   00C0 33            [ 6]  197 	inc	sp
   00C1 CDr27r00      [17]  198 	call	_waitNVSYNCs
   00C4 33            [ 6]  199 	inc	sp
   00C5 E1            [10]  200 	pop	hl
                            201 ;src/main.c:74: func(CPCT_VMEM_START, pattern, 0x4000);
   00C6 01 00 40      [10]  202 	ld	bc, #0x4000
   00C9 C5            [11]  203 	push	bc
   00CA E5            [11]  204 	push	hl
   00CB 21 00 C0      [10]  205 	ld	hl, #0xc000
   00CE E5            [11]  206 	push	hl
   00CF DD 6E 04      [19]  207 	ld	l,4 (ix)
   00D2 DD 66 05      [19]  208 	ld	h,5 (ix)
   00D5 CDr00r00      [17]  209 	call	___sdcc_call_hl
                            210 ;src/main.c:75: waitNVSYNCs(vsyncs);
   00D8 DD 7E 07      [19]  211 	ld	a, 7 (ix)
   00DB F5            [11]  212 	push	af
   00DC 33            [ 6]  213 	inc	sp
   00DD CDr27r00      [17]  214 	call	_waitNVSYNCs
   00E0 33            [ 6]  215 	inc	sp
                            216 ;src/main.c:76: func(CPCT_VMEM_START,       0, 0x4000);
   00E1 21 00 40      [10]  217 	ld	hl, #0x4000
   00E4 E5            [11]  218 	push	hl
   00E5 26 00         [ 7]  219 	ld	h, #0x00
   00E7 E5            [11]  220 	push	hl
   00E8 26 C0         [ 7]  221 	ld	h, #0xc0
   00EA E5            [11]  222 	push	hl
   00EB DD 6E 04      [19]  223 	ld	l,4 (ix)
   00EE DD 66 05      [19]  224 	ld	h,5 (ix)
   00F1 CDr00r00      [17]  225 	call	___sdcc_call_hl
                            226 ;src/main.c:71: for(i=0; i < 2 ; i++) {
   00F4 DD 34 FF      [23]  227 	inc	-1 (ix)
   00F7 DD 7E FF      [19]  228 	ld	a, -1 (ix)
   00FA D6 02         [ 7]  229 	sub	a, #0x02
   00FC 38 AB         [12]  230 	jr	C,00102$
   00FE 33            [ 6]  231 	inc	sp
   00FF DD E1         [14]  232 	pop	ix
   0101 C9            [10]  233 	ret
                            234 ;src/main.c:83: void main(void) {   
                            235 ;	---------------------------------
                            236 ; Function main
                            237 ; ---------------------------------
   0102                     238 _main::
                            239 ;src/main.c:84: u8 colour = 1, vsyncs = 50;
   0102 01 01 32      [10]  240 	ld	bc,#0x3201
                            241 ;src/main.c:88: cpct_disableFirmware(); 
   0105 C5            [11]  242 	push	bc
   0106 CDr00r00      [17]  243 	call	_cpct_disableFirmware
   0109 2E 00         [ 7]  244 	ld	l, #0x00
   010B CDr00r00      [17]  245 	call	_cpct_setVideoMode
   010E C1            [10]  246 	pop	bc
                            247 ;src/main.c:92: while(1) {
   010F                     248 00106$:
                            249 ;src/main.c:94: cpct_setBorder(4);
   010F C5            [11]  250 	push	bc
   0110 21 10 04      [10]  251 	ld	hl, #0x0410
   0113 E5            [11]  252 	push	hl
   0114 CDr00r00      [17]  253 	call	_cpct_setPALColour
   0117 C1            [10]  254 	pop	bc
                            255 ;src/main.c:95: doSomeClears8(colour, vsyncs);
   0118 C5            [11]  256 	push	bc
   0119 C5            [11]  257 	push	bc
   011A CDr3Dr00      [17]  258 	call	_doSomeClears8
   011D 21 10 01      [10]  259 	ld	hl, #0x0110
   0120 E3            [19]  260 	ex	(sp),hl
   0121 CDr00r00      [17]  261 	call	_cpct_setPALColour
   0124 C1            [10]  262 	pop	bc
                            263 ;src/main.c:99: doSomeClears(&cpct_memset_f8,  colour, vsyncs);
   0125 C5            [11]  264 	push	bc
   0126 C5            [11]  265 	push	bc
   0127 21r00r00      [10]  266 	ld	hl, #_cpct_memset_f8
   012A E5            [11]  267 	push	hl
   012B CDr9Cr00      [17]  268 	call	_doSomeClears
   012E F1            [10]  269 	pop	af
   012F 21 10 05      [10]  270 	ld	hl, #0x0510
   0132 E3            [19]  271 	ex	(sp),hl
   0133 CDr00r00      [17]  272 	call	_cpct_setPALColour
   0136 C1            [10]  273 	pop	bc
                            274 ;src/main.c:103: doSomeClears(&cpct_memset_f64, colour, vsyncs);
   0137 C5            [11]  275 	push	bc
   0138 C5            [11]  276 	push	bc
   0139 21r00r00      [10]  277 	ld	hl, #_cpct_memset_f64
   013C E5            [11]  278 	push	hl
   013D CDr9Cr00      [17]  279 	call	_doSomeClears
   0140 F1            [10]  280 	pop	af
   0141 F1            [10]  281 	pop	af
   0142 C1            [10]  282 	pop	bc
                            283 ;src/main.c:106: if (++colour > 15) colour = 1;
   0143 0C            [ 4]  284 	inc	c
   0144 3E 0F         [ 7]  285 	ld	a, #0x0f
   0146 91            [ 4]  286 	sub	a, c
   0147 30 02         [12]  287 	jr	NC,00102$
   0149 0E 01         [ 7]  288 	ld	c, #0x01
   014B                     289 00102$:
                            290 ;src/main.c:107: if (! --vsyncs) vsyncs = 50;
   014B 10 C2         [13]  291 	djnz	00106$
   014D 06 32         [ 7]  292 	ld	b, #0x32
   014F 18 BE         [12]  293 	jr	00106$
                            294 	.area _CODE
                            295 	.area _INITIALIZER
                            296 	.area _CABS (ABS)
